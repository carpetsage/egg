# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: ei.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List

import betterproto


class Egg(betterproto.Enum):
    EDIBLE = 1
    SUPERFOOD = 2
    MEDICAL = 3
    ROCKET_FUEL = 4
    SUPER_MATERIAL = 5
    FUSION = 6
    QUANTUM = 7
    IMMORTALITY = 8
    TACHYON = 9
    GRAVITON = 10
    DILITHIUM = 11
    PRODIGY = 12
    TERRAFORM = 13
    ANTIMATTER = 14
    DARK_MATTER = 15
    AI = 16
    NEBULA = 17
    UNIVERSE = 18
    ENLIGHTENMENT = 19
    CHOCOLATE = 100
    EASTER = 101
    WATERBALLOON = 102
    FIREWORK = 103
    PUMPKIN = 104
    CUSTOM_EGG = 200
    UNKNOWN = 1000


class FarmType(betterproto.Enum):
    EMPTY = 1
    HOME = 2
    CONTRACT = 3


class GoalType(betterproto.Enum):
    EGGS_LAID = 1
    UNKNOWN_GOAL = 100


class RewardType(betterproto.Enum):
    CASH = 1
    GOLD = 2
    SOUL_EGGS = 3
    EGGS_OF_PROPHECY = 4
    EPIC_RESEARCH_ITEM = 5
    PIGGY_FILL = 6
    PIGGY_MULTIPLIER = 7
    PIGGY_LEVEL_BUMP = 8
    BOOST = 9
    BOOST_TOKEN = 10
    ARTIFACT = 11
    ARTIFACT_CASE = 12
    CHICKEN = 13
    SHELL_SCRIPT = 14
    UNKNOWN_REWARD = 100


class UILocation(betterproto.Enum):
    NONE = 0
    SHOP = 1
    BOOST_SHOP = 2
    PIGGY = 3
    PRO_PERMIT = 4
    ULTRA_SHOP = 10
    SHELLS = 5
    SHELL_SETS = 6
    SHELLS_SHOWCASE = 12
    CHICKENS = 7
    CHICKEN_HATS = 11
    EPIC_RESEARCH = 8
    SETTINGS = 9
    HELP = 13
    UNIVERSITY = 14


class UserType(betterproto.Enum):
    ALL_USERS = 0
    EGGED_UP = 15
    CONTRACTS_UNLOCKED = 1
    ARTIFACTS_UNLOCKED = 3
    FUEL_TANK_UNLOCKED = 4
    PRO_PERMIT_ACTIVE = 5
    ULTRA_ACTIVE = 6
    NO_PRO_PERMIT = 7
    NO_ULTRA = 8
    CONTRACTS_INACTIVE = 9
    CONTRACTS_ACTIVE = 10
    PLAYING_CONTRACT = 11
    ARTIFACTS_INACTIVE = 12
    ARTIFACTS_ACTIVE = 13
    PRESTIGE_READY = 14
    PIGGY_HESITANT = 16


class LeaderboardScope(betterproto.Enum):
    ALL_TIME = 0
    CURRENT_SEASON = 1


class Platform(betterproto.Enum):
    IOS = 1
    DROID = 2


class DeviceFormFactor(betterproto.Enum):
    PHONE = 1
    TABLET = 2


class AdNetwork(betterproto.Enum):
    VUNGLE = 0
    CHARTBOOST = 1
    AD_COLONY = 2
    HYPER_MX = 3
    UNITY = 4
    FACEBOOK = 5
    APPLOVIN = 6


class EggIncFirstContactResponseErrorCodes(betterproto.Enum):
    NO_ERROR = 0
    EXISTING_USER_W_GAMER_ID = 1
    USER_NOT_FOUND = 2
    BACKUP_CONFLICT = 3


class GameModifierGameDimension(betterproto.Enum):
    INVALID = 0
    EARNINGS = 1
    AWAY_EARNINGS = 2
    INTERNAL_HATCHERY_RATE = 3
    EGG_LAYING_RATE = 4
    SHIPPING_CAPACITY = 5
    HAB_CAPACITY = 6
    VEHICLE_COST = 7
    HAB_COST = 8
    RESEARCH_COST = 9


class ContractPlayerGrade(betterproto.Enum):
    GRADE_UNSET = 0
    GRADE_C = 1
    GRADE_B = 2
    GRADE_A = 3
    GRADE_AA = 4
    GRADE_AAA = 5


class ContractPlayerInfoStatus(betterproto.Enum):
    UNKNOWN = 0
    CALCULATING = 1
    OUT_OF_DATE = 2
    INCOMPLETE = 4
    COMPLETE = 3


class ContractEvaluationPoorBehavior(betterproto.Enum):
    NONE = 0
    LOW_CONTRIBUTION = 1
    BAD_CONTRIBUTION = 2
    DISHONORABLY_DISCHARGED = 3
    POOR_TEAMWORK = 4
    ABANDONED_COOP = 5
    TIME_CHEAT = 6


class ContractEvaluationStatus(betterproto.Enum):
    UNKNOWN = 0
    PENDING = 1
    EVALUATING = 2
    COMPLETE = 3


class ContractCoopStatusResponseResponseStatus(betterproto.Enum):
    NO_ERROR = 0
    MISSING_USER = 1
    MISSING_COOP_ID = 2
    MISSING_CONTRACT_ID = 3
    MEMBERSHIP_NOT_FOUND = 4
    COOP_NOT_FOUND = 5
    CONTRACT_NOT_FOUND = 6
    INVALID_MEMBERSHIP = 7
    NO_HTTP_RESPONSE = 500


class ContractCoopStatusResponseMemberStatus(betterproto.Enum):
    VALID = 0
    KICKED_INACTIVE = 1
    KICKED_PRIVATE = 2
    KICKED_CHEATS = 3
    KICKED_LEECH = 4


class ContractCoopStatusResponseStatus(betterproto.Enum):
    UNKNOWN = 0
    LOBBY = 1
    ACTIVE = 2
    COMPLETE = 3
    FINALIZED = 4


class ReportPlayerCoopRequestReason(betterproto.Enum):
    UNKNOWN = 0
    OFFENSIVE_NAME = 1
    CHEATING = 2
    LEECHING = 3


class KickPlayerCoopRequestReason(betterproto.Enum):
    INVALID = 0
    CHEATER = 1
    IDLE = 2
    LEECH = 3
    PRIVATE = 4


class LiveConfigHelpConfigHowToVideoInfoType(betterproto.Enum):
    VIDEO = 0
    ARTICLE = 1


class MissionInfoSpaceship(betterproto.Enum):
    CHICKEN_ONE = 0
    CHICKEN_NINE = 1
    CHICKEN_HEAVY = 2
    BCR = 3
    MILLENIUM_CHICKEN = 4
    CORELLIHEN_CORVETTE = 5
    GALEGGTICA = 6
    CHICKFIANT = 7
    VOYEGGER = 8
    HENERPRISE = 9
    ATREGGIES = 10


class MissionInfoStatus(betterproto.Enum):
    FUELING = 0
    PREPARE_TO_LAUNCH = 5
    EXPLORING = 10
    RETURNED = 15
    ANALYZING = 16
    COMPLETE = 20
    ARCHIVED = 25


class MissionInfoDurationType(betterproto.Enum):
    SHORT = 0
    LONG = 1
    EPIC = 2
    TUTORIAL = 3


class ArtifactSpecName(betterproto.Enum):
    LUNAR_TOTEM = 0
    NEODYMIUM_MEDALLION = 3
    BEAK_OF_MIDAS = 4
    LIGHT_OF_EGGENDIL = 5
    DEMETERS_NECKLACE = 6
    VIAL_MARTIAN_DUST = 7
    ORNATE_GUSSET = 8
    THE_CHALICE = 9
    BOOK_OF_BASAN = 10
    PHOENIX_FEATHER = 11
    TUNGSTEN_ANKH = 12
    AURELIAN_BROOCH = 21
    CARVED_RAINSTICK = 22
    PUZZLE_CUBE = 23
    QUANTUM_METRONOME = 24
    SHIP_IN_A_BOTTLE = 25
    TACHYON_DEFLECTOR = 26
    INTERSTELLAR_COMPASS = 27
    DILITHIUM_MONOCLE = 28
    TITANIUM_ACTUATOR = 29
    MERCURYS_LENS = 30
    TACHYON_STONE = 1
    DILITHIUM_STONE = 31
    SHELL_STONE = 32
    LUNAR_STONE = 33
    SOUL_STONE = 34
    PROPHECY_STONE = 39
    QUANTUM_STONE = 36
    TERRA_STONE = 37
    LIFE_STONE = 38
    CLARITY_STONE = 40
    EXTRATERRESTRIAL_ALUMINUM = 13
    ANCIENT_TUNGSTEN = 14
    SPACE_ROCKS = 15
    ALIEN_WOOD = 16
    GOLD_METEORITE = 17
    TAU_CETI_GEODE = 18
    CENTAURIAN_STEEL = 19
    ERIDANI_FEATHER = 20
    DRONE_PARTS = 35
    CELESTIAL_BRONZE = 41
    LALANDE_HIDE = 42
    SOLAR_TITANIUM = 43
    TACHYON_STONE_FRAGMENT = 2
    DILITHIUM_STONE_FRAGMENT = 44
    SHELL_STONE_FRAGMENT = 45
    LUNAR_STONE_FRAGMENT = 46
    SOUL_STONE_FRAGMENT = 47
    PROPHECY_STONE_FRAGMENT = 48
    QUANTUM_STONE_FRAGMENT = 49
    TERRA_STONE_FRAGMENT = 50
    LIFE_STONE_FRAGMENT = 51
    CLARITY_STONE_FRAGMENT = 52
    UNKNOWN = 10000


class ArtifactSpecLevel(betterproto.Enum):
    INFERIOR = 0
    LESSER = 1
    NORMAL = 2
    GREATER = 3
    SUPERIOR = 4


class ArtifactSpecRarity(betterproto.Enum):
    COMMON = 0
    RARE = 1
    EPIC = 2
    LEGENDARY = 3


class ArtifactSpecType(betterproto.Enum):
    ARTIFACT = 0
    STONE = 1
    INGREDIENT = 2
    STONE_INGREDIENT = 3


class SaveBackupResponseErrorCodes(betterproto.Enum):
    NO_ERROR = 0
    USER_NOT_FOUND = 1
    COULD_NOT_OVERWRITE = 2
    BACKUP_OFFERED = 3
    BAD_USER_ID = 4


class ShellSpecAssetType(betterproto.Enum):
    COOP = 1
    SHACK = 2
    SUPER_SHACK = 3
    SHORT_HOUSE = 4
    THE_STANDARD = 5
    LONG_HOUSE = 6
    DOUBLE_DECKER = 7
    WAREHOUSE = 8
    CENTER = 9
    BUNKER = 10
    EGGKEA = 11
    HAB_1K = 12
    HANGAR = 13
    TOWER = 14
    HAB_10K = 15
    EGGTOPIA = 16
    MONOLITH = 17
    PLANET_PORTAL = 18
    CHICKEN_UNIVERSE = 19
    SILO_0_SMALL = 50
    SILO_0_MED = 51
    SILO_0_LARGE = 52
    SILO_1_SMALL = 53
    SILO_1_MED = 54
    SILO_1_LARGE = 55
    SILO_ALL = 59
    MAILBOX = 70
    TROPHY_CASE = 71
    GROUND = 72
    HARDSCAPE = 73
    HYPERLOOP = 74
    DEPOT_1 = 100
    DEPOT_2 = 101
    DEPOT_3 = 102
    DEPOT_4 = 103
    DEPOT_5 = 104
    DEPOT_6 = 105
    DEPOT_7 = 106
    LAB_1 = 110
    LAB_2 = 111
    LAB_3 = 112
    LAB_4 = 113
    LAB_5 = 114
    LAB_6 = 115
    HATCHERY_EDIBLE = 120
    HATCHERY_SUPERFOOD = 121
    HATCHERY_MEDICAL = 122
    HATCHERY_ROCKET_FUEL = 123
    HATCHERY_SUPERMATERIAL = 124
    HATCHERY_FUSION = 125
    HATCHERY_QUANTUM = 126
    HATCHERY_IMMORTALITY = 127
    HATCHERY_TACHYON = 128
    HATCHERY_GRAVITON = 129
    HATCHERY_DILITHIUM = 130
    HATCHERY_PRODIGY = 131
    HATCHERY_TERRAFORM = 132
    HATCHERY_ANTIMATTER = 133
    HATCHERY_DARK_MATTER = 134
    HATCHERY_AI = 135
    HATCHERY_NEBULA = 136
    HATCHERY_UNIVERSE = 137
    HATCHERY_ENLIGHTENMENT = 138
    HATCHERY_CHOCOLATE = 139
    HATCHERY_EASTER = 140
    HATCHERY_WATERBALLOON = 141
    HATCHERY_FIREWORK = 142
    HATCHERY_PUMPKIN = 143
    HATCHERY_CUSTOM = 150
    HOA_1 = 170
    HOA_2 = 171
    HOA_3 = 172
    MISSION_CONTROL_1 = 180
    MISSION_CONTROL_2 = 181
    MISSION_CONTROL_3 = 182
    FUEL_TANK_1 = 200
    FUEL_TANK_2 = 201
    FUEL_TANK_3 = 202
    FUEL_TANK_4 = 203
    HATCHERY_GRAVITON_TOP = 500
    HATCHERY_NEBULA_MIDDLE = 501
    HATCHERY_NEBULA_TOP = 502
    HATCHERY_DARK_MATTER_RING_1 = 505
    HATCHERY_DARK_MATTER_RING_2 = 506
    HATCHERY_DARK_MATTER_RING_3 = 507
    HATCHERY_AI_TOP_1 = 510
    HATCHERY_AI_TOP_2 = 511
    HATCHERY_AI_TOP_3 = 512
    HATCHERY_AI_TOP_4 = 513
    HATCHERY_UNIVERSE_PROBE = 515
    HATCHERY_UNIVERSE_BOLT = 516
    HATCHERY_ENLIGHTENMENT_ORB = 520
    HYPERLOOP_TRACK = 570
    MAILBOX_FULL = 600
    CHICKEN = 1000
    HAT = 1010
    UNKNOWN = 9999


class ShellObjectSpecChickenAnimation(betterproto.Enum):
    STANDARD_RUN = 0
    SLOWMO = 7
    WOBBLE = 1
    WOBBLE_LEAN = 5
    SMOOTH = 2
    SMOOTH_LEAN = 6
    HOVER = 3
    SIDEWAYS_SMOOTH = 4
    SIDEWAYS_LEAN = 8


class ShellDBFarmElement(betterproto.Enum):
    HEN_HOUSE = 1
    SILO = 2
    MAILBOX = 3
    TROPHY_CASE = 4
    GROUND = 5
    HARDSCAPE = 6
    HYPERLOOP = 7
    DEPOT = 8
    LAB = 9
    HATCHERY = 10
    HOA = 11
    MISSION_CONTROL = 12
    FUEL_TANK = 13
    CHICKEN = 14
    HAT = 15
    UNKNOWN = 99


class ShellShowcaseListingInfoStatus(betterproto.Enum):
    NONE = 0
    SUBMITTED = 1
    LIVE = 2
    FEATURED = 3
    FEATURED_ALUM = 5
    ARCHIVED = 6
    INVALID = 4


class UserVerificationAnalysisStatus(betterproto.Enum):
    UNKNOWN = 0
    PROCESSING = 1
    COMPLETE = 2


class UserSubscriptionInfoLevel(betterproto.Enum):
    STANDARD = 0
    PRO = 1


class UserSubscriptionInfoStatus(betterproto.Enum):
    UNKNOWN = 0
    ACTIVE = 1
    EXPIRED = 2
    REVOKED = 3
    GRACE_PERIOD = 4
    PAUSE_HOLD = 5


@dataclass
class Vector3(betterproto.Message):
    x: float = betterproto.float_field(1)
    y: float = betterproto.float_field(2)
    z: float = betterproto.float_field(3)


@dataclass
class Vector4(betterproto.Message):
    x: float = betterproto.float_field(1)
    y: float = betterproto.float_field(2)
    z: float = betterproto.float_field(3)
    w: float = betterproto.float_field(4)


@dataclass
class Backup(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    ei_user_id: str = betterproto.string_field(18)
    game_services_id: str = betterproto.string_field(16)
    push_user_id: str = betterproto.string_field(26)
    device_id: str = betterproto.string_field(17)
    user_name: str = betterproto.string_field(2)
    approx_time: float = betterproto.double_field(3)
    version: int = betterproto.uint32_field(21)
    force_offer_backup: bool = betterproto.bool_field(20)
    force_backup: bool = betterproto.bool_field(22)
    settings: "BackupSettings" = betterproto.message_field(4)
    tutorial: "BackupTutorial" = betterproto.message_field(5)
    stats: "BackupStats" = betterproto.message_field(6)
    game: "BackupGame" = betterproto.message_field(7)
    artifacts: "BackupArtifacts" = betterproto.message_field(14)
    shells: "BackupShells" = betterproto.message_field(25)
    sim: "BackupSimulation" = betterproto.message_field(8)
    farms: List["BackupSimulation"] = betterproto.message_field(12)
    mission: "BackupMission" = betterproto.message_field(9)
    misc: "BackupMisc" = betterproto.message_field(10)
    contracts: "MyContracts" = betterproto.message_field(13)
    artifacts_db: "ArtifactsDB" = betterproto.message_field(15)
    shell_db: "ShellDB" = betterproto.message_field(24)
    read_mail_ids: List[str] = betterproto.string_field(23)
    mail_state: "MailState" = betterproto.message_field(27)
    checksum: int = betterproto.uint64_field(100)
    signature: str = betterproto.string_field(101)


@dataclass
class BackupSettings(betterproto.Message):
    sfx: bool = betterproto.bool_field(1)
    music: bool = betterproto.bool_field(2)
    low_battery_mode: bool = betterproto.bool_field(3)
    low_performance_mode: bool = betterproto.bool_field(4)
    force_touch_chicken_btn: bool = betterproto.bool_field(9)
    notifications_queried: bool = betterproto.bool_field(5)
    last_notification_query_time: float = betterproto.double_field(27)
    notifications_on: bool = betterproto.bool_field(6)
    notify_daily_gift: bool = betterproto.bool_field(11)
    low_performance: bool = betterproto.bool_field(10)
    auto_stop_fueling: bool = betterproto.bool_field(25)
    max_enabled: bool = betterproto.bool_field(26)
    hide_cc_status: bool = betterproto.bool_field(28)
    contracts_widget_enabled: bool = betterproto.bool_field(29)
    artifact_sparkle: bool = betterproto.bool_field(30)
    last_backup_time: float = betterproto.double_field(24)
    coppa_queried: bool = betterproto.bool_field(7)
    coppa_restricted: bool = betterproto.bool_field(8)
    gdpr_consent_queried: bool = betterproto.bool_field(12)
    gdpr_age_restricted: bool = betterproto.bool_field(16)
    gdpr_consent_given: bool = betterproto.bool_field(13)
    age_queried: bool = betterproto.bool_field(18)
    age_restricted: bool = betterproto.bool_field(19)
    data_collection_consent_queried: bool = betterproto.bool_field(20)
    data_collection_consent_given: bool = betterproto.bool_field(21)
    last_day_age_queried: int = betterproto.uint32_field(17)
    user_ads_enabled: bool = betterproto.bool_field(14)
    user_cloud_enabled: bool = betterproto.bool_field(15)
    user_analytics_enabled: bool = betterproto.bool_field(22)
    user_personalized_ads_enabled: bool = betterproto.bool_field(23)


@dataclass
class BackupTutorial(betterproto.Message):
    intro_shown: bool = betterproto.bool_field(1)
    click_tutorial_shown: bool = betterproto.bool_field(2)
    buy_hab_shown: bool = betterproto.bool_field(3)
    hire_vehicle_shown: bool = betterproto.bool_field(4)
    q_num_shown: bool = betterproto.bool_field(5)
    s_num_shown: bool = betterproto.bool_field(6)
    contracts_tab_shown: bool = betterproto.bool_field(7)
    contract_info_shown: bool = betterproto.bool_field(8)
    join_coop_shown: bool = betterproto.bool_field(9)
    switch_farm_shown: bool = betterproto.bool_field(10)
    tutorial_shown: List[bool] = betterproto.bool_field(11)


@dataclass
class BackupStats(betterproto.Message):
    egg_totals__o_l_d: List[int] = betterproto.uint64_field(1)
    egg_totals: List[float] = betterproto.double_field(8)
    unlimited_chickens_uses: int = betterproto.uint64_field(7)
    refill_uses: int = betterproto.uint64_field(2)
    warp_1_uses: int = betterproto.uint64_field(4)
    warp_8_uses: int = betterproto.uint64_field(5)
    boosts_used: int = betterproto.uint64_field(13)
    video_doubler_uses: int = betterproto.uint64_field(3)
    drone_takedowns: int = betterproto.uint64_field(6)
    drone_takedowns_elite: int = betterproto.uint64_field(10)
    num_prestiges: int = betterproto.uint64_field(9)
    num_piggy_breaks: int = betterproto.uint64_field(11)
    iap_packs_purchased: int = betterproto.uint64_field(12)
    piggy_full: bool = betterproto.bool_field(14)
    piggy_found_full: bool = betterproto.bool_field(15)
    time_piggy_filled_realtime: float = betterproto.double_field(16)
    time_piggy_full_gametime: float = betterproto.double_field(17)
    lost_piggy_increments: int = betterproto.uint64_field(18)


@dataclass
class BackupGame(betterproto.Message):
    current_farm: int = betterproto.uint32_field(22)
    max_egg_reached: "Egg" = betterproto.enum_field(1)
    golden_eggs_earned: int = betterproto.uint64_field(2)
    golden_eggs_spent: int = betterproto.uint64_field(3)
    uncliamed_golden_eggs: int = betterproto.uint64_field(16)
    soul_eggs: int = betterproto.uint64_field(4)
    unclaimed_soul_eggs: int = betterproto.uint64_field(17)
    soul_eggs_d: float = betterproto.double_field(34)
    unclaimed_soul_eggs_d: float = betterproto.double_field(35)
    eggs_of_prophecy: int = betterproto.uint64_field(23)
    unclaimed_eggs_of_prophecy: int = betterproto.uint64_field(24)
    shell_scripts_earned: int = betterproto.uint64_field(38)
    shell_scripts_spent: int = betterproto.uint64_field(39)
    unclaimed_shell_scripts: int = betterproto.uint64_field(40)
    prestige_cash_earned: float = betterproto.double_field(5)
    prestige_soul_boost_cash: float = betterproto.double_field(33)
    lifetime_cash_earned: float = betterproto.double_field(6)
    piggy_bank: int = betterproto.uint64_field(7)
    piggy_full_alert_shown: bool = betterproto.bool_field(31)
    permit_level: int = betterproto.uint32_field(8)
    epic_research: List["BackupResearchItem"] = betterproto.message_field(9)
    hyperloop_station: bool = betterproto.bool_field(29)
    next_daily_gift_time: float = betterproto.double_field(10)
    last_daily_gift_collected_day: int = betterproto.uint32_field(20)
    num_daily_gifts_collected: int = betterproto.uint32_field(28)
    news: List["BackupNewsHeadline"] = betterproto.message_field(11)
    last_news_time: float = betterproto.double_field(12)
    current_multiplier: float = betterproto.double_field(13)
    current_multiplier_expiration: float = betterproto.double_field(14)
    achievements: List["BackupAchievementInfo"] = betterproto.message_field(15)
    max_farm_size_reached: List[int] = betterproto.uint64_field(18)
    egg_medal_level: List[int] = betterproto.uint32_field(19)
    long_idle_notification_set: bool = betterproto.bool_field(25)
    long_idle_notification_threshold: float = betterproto.double_field(26)
    long_idle_reward: float = betterproto.double_field(27)
    boosts: List["BackupOwnedBoost"] = betterproto.message_field(30)
    total_time_cheats_detected: int = betterproto.uint32_field(32)
    force_elite_contracts: bool = betterproto.bool_field(36)
    new_player_event_end_time: float = betterproto.double_field(37)


@dataclass
class BackupArtifacts(betterproto.Message):
    infusing: bool = betterproto.bool_field(1)
    item_being_infused: "ArtifactInventoryItem" = betterproto.message_field(2)
    spec_being_infused: "ArtifactSpec" = betterproto.message_field(13)
    egg_type_infusing: "Egg" = betterproto.enum_field(3)
    infusing_eggs_required: float = betterproto.double_field(4)
    eggs_infused: float = betterproto.double_field(5)
    flow_percentage_artifacts: float = betterproto.double_field(6)
    fueling_enabled: bool = betterproto.bool_field(7)
    tank_filling_enabled: bool = betterproto.bool_field(14)
    tank_level: int = betterproto.uint32_field(15)
    tank_fuels: List[float] = betterproto.double_field(16)
    tank_limits: List[float] = betterproto.double_field(18)
    last_fueled_ship: "MissionInfoSpaceship" = betterproto.enum_field(9)
    inventory_score: float = betterproto.double_field(10)
    crafting_xp: float = betterproto.double_field(17)
    enabled: bool = betterproto.bool_field(11)
    intro_shown: bool = betterproto.bool_field(12)
    infusing_enabled__d_e_p_r_e_c_a_t_e_d: bool = betterproto.bool_field(8)


@dataclass
class BackupShells(betterproto.Message):
    intro_alert: bool = betterproto.bool_field(1)
    contracts_intro_alert: bool = betterproto.bool_field(2)
    num_new: List[int] = betterproto.int32_field(3)


@dataclass
class BackupSimulation(betterproto.Message):
    egg_type: "Egg" = betterproto.enum_field(1)
    farm_type: "FarmType" = betterproto.enum_field(19)
    contract_id: str = betterproto.string_field(20)
    cash_earned: float = betterproto.double_field(2)
    cash_spent: float = betterproto.double_field(3)
    unclaimed_cash: float = betterproto.double_field(4)
    last_step_time: float = betterproto.double_field(5)
    num_chickens: int = betterproto.uint64_field(6)
    num_chickens_unsettled: int = betterproto.uint64_field(7)
    num_chickens_running: int = betterproto.uint64_field(8)
    eggs_laid: float = betterproto.double_field(9)
    eggs_shipped: float = betterproto.double_field(30)
    eggs_paid_for: float = betterproto.double_field(10)
    silos_owned: int = betterproto.uint32_field(11)
    habs: List[int] = betterproto.uint32_field(12)
    hab_population: List[int] = betterproto.uint64_field(13)
    hab_population_indound: List[int] = betterproto.uint64_field(14)
    hab_incubator_popuplation: List[float] = betterproto.double_field(15)
    hatchery_population: float = betterproto.double_field(16)
    vehicles: List[int] = betterproto.uint32_field(17)
    train_length: List[int] = betterproto.uint32_field(21)
    common_research: List["BackupResearchItem"] = betterproto.message_field(18)
    active_boosts: List["BackupActiveBoost"] = betterproto.message_field(22)
    last_cash_boost_time: float = betterproto.double_field(31)
    time_cheats_detected: int = betterproto.uint32_field(23)
    time_cheat_debt: float = betterproto.double_field(24)
    boost_tokens_received: int = betterproto.uint32_field(25)
    boost_tokens_spent: int = betterproto.uint32_field(26)
    boost_tokens_given: int = betterproto.uint32_field(28)
    unclaimed_boost_tokens: int = betterproto.uint32_field(27)
    gametime_until_next_boost_token: float = betterproto.double_field(29)


@dataclass
class BackupMission(betterproto.Message):
    current_mission: str = betterproto.string_field(1)
    reference_value: float = betterproto.double_field(2)
    current_missions: List[str] = betterproto.string_field(4)
    missions: List["BackupMissionInfo"] = betterproto.message_field(3)


@dataclass
class BackupMisc(betterproto.Message):
    chicken_btn_pref_big: bool = betterproto.bool_field(1)
    free_hatchery_refill_given: bool = betterproto.bool_field(2)
    last_share_farm_value: float = betterproto.double_field(3)
    last_share_swarm_farm_value: float = betterproto.double_field(4)
    last_share_swarm_size: float = betterproto.double_field(5)
    last_prestige_alert_soul_eggs__d_e_p_r_e_c_a_t_e_d: int = betterproto.uint64_field(
        10
    )
    friend_rank: int = betterproto.uint64_field(6)
    friend_rank_pop: int = betterproto.uint64_field(7)
    global_rank: int = betterproto.uint64_field(8)
    global_rank_pop: int = betterproto.uint64_field(9)
    challenges_alert: bool = betterproto.bool_field(20)
    trophy_alert: bool = betterproto.bool_field(11)
    ar_alert: bool = betterproto.bool_field(12)
    contracts_alert: bool = betterproto.bool_field(13)
    contracts_alert_v2: bool = betterproto.bool_field(21)
    coop_alert: bool = betterproto.bool_field(14)
    coop_alert_v2: bool = betterproto.bool_field(22)
    switch_alert: bool = betterproto.bool_field(15)
    egg_of_prophecy_alert: bool = betterproto.bool_field(16)
    boost_token_alert: bool = betterproto.bool_field(17)
    soul_egg_alert: bool = betterproto.bool_field(18)
    backup_reminder_alert: bool = betterproto.bool_field(19)
    max_button_alert: bool = betterproto.bool_field(23)
    mission_target_alert: bool = betterproto.bool_field(24)
    colleggtibles_alert: bool = betterproto.bool_field(25)


@dataclass
class BackupResearchItem(betterproto.Message):
    id: str = betterproto.string_field(1)
    level: int = betterproto.uint32_field(2)


@dataclass
class BackupNewsHeadline(betterproto.Message):
    id: str = betterproto.string_field(1)
    read: bool = betterproto.bool_field(2)


@dataclass
class BackupAchievementInfo(betterproto.Message):
    id: str = betterproto.string_field(1)
    achieved: bool = betterproto.bool_field(2)


@dataclass
class BackupActiveBoost(betterproto.Message):
    boost_id: str = betterproto.string_field(1)
    time_remaining: float = betterproto.double_field(2)
    reference_value: float = betterproto.double_field(3)


@dataclass
class BackupOwnedBoost(betterproto.Message):
    boost_id: str = betterproto.string_field(1)
    count: int = betterproto.uint32_field(2)


@dataclass
class BackupMissionInfo(betterproto.Message):
    id: str = betterproto.string_field(1)
    completed: bool = betterproto.bool_field(2)
    reference_value: float = betterproto.double_field(3)


@dataclass
class EggIncFirstContactRequest(betterproto.Message):
    rinfo: "BasicRequestInfo" = betterproto.message_field(8)
    ei_user_id: str = betterproto.string_field(4)
    user_id: str = betterproto.string_field(1)
    game_services_id: str = betterproto.string_field(7)
    device_id: str = betterproto.string_field(5)
    username: str = betterproto.string_field(6)
    client_version: int = betterproto.uint32_field(2)
    platform: "Platform" = betterproto.enum_field(3)


@dataclass
class EggIncFirstContactResponse(betterproto.Message):
    ei_user_id: str = betterproto.string_field(2)
    ids_transferred: List[str] = betterproto.string_field(3)
    error_code: int = betterproto.uint32_field(4)
    error_message: str = betterproto.string_field(5)
    backup: "Backup" = betterproto.message_field(1)


@dataclass
class EggIncAdConfig(betterproto.Message):
    network_priority: List["AdNetwork"] = betterproto.enum_field(1)


@dataclass
class DailyGiftInfo(betterproto.Message):
    current_day: int = betterproto.uint32_field(1)
    seconds_to_next_day: float = betterproto.double_field(2)


@dataclass
class SalesInfoRequest(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    piggy_full: bool = betterproto.bool_field(2)
    piggy_found_full: bool = betterproto.bool_field(3)
    seconds_full_realtime: float = betterproto.double_field(4)
    seconds_full_gametime: float = betterproto.double_field(5)
    lost_increments: int = betterproto.uint32_field(7)
    current_client_version: int = betterproto.uint32_field(10)


@dataclass
class IAPSaleEntry(betterproto.Message):
    product_id: str = betterproto.string_field(1)
    seconds_remaining: float = betterproto.double_field(2)
    discount_string: str = betterproto.string_field(3)
    sale_id: str = betterproto.string_field(4)


@dataclass
class SalesInfo(betterproto.Message):
    sales: List["IAPSaleEntry"] = betterproto.message_field(1)


@dataclass
class EggIncEvent(betterproto.Message):
    identifier: str = betterproto.string_field(1)
    seconds_remaining: float = betterproto.double_field(2)
    type: str = betterproto.string_field(3)
    multiplier: float = betterproto.double_field(4)
    subtitle: str = betterproto.string_field(5)
    start_time: float = betterproto.double_field(6)
    duration: float = betterproto.double_field(7)
    cc_only: bool = betterproto.bool_field(8)


@dataclass
class EggIncCurrentEvents(betterproto.Message):
    events: List["EggIncEvent"] = betterproto.message_field(1)


@dataclass
class DeviceInfo(betterproto.Message):
    device_id: str = betterproto.string_field(1)
    advertising_id: str = betterproto.string_field(13)
    platform: str = betterproto.string_field(2)
    form_factor: str = betterproto.string_field(3)
    device_name: str = betterproto.string_field(4)
    platform_version: str = betterproto.string_field(5)
    locale_country: str = betterproto.string_field(6)
    locale_language: str = betterproto.string_field(7)
    gpu_vendor: str = betterproto.string_field(8)
    gpu_model: str = betterproto.string_field(9)
    device_bucket: str = betterproto.string_field(10)
    screen_width: int = betterproto.uint32_field(11)
    screen_height: int = betterproto.uint32_field(12)


@dataclass
class AppInfo(betterproto.Message):
    version_str: str = betterproto.string_field(1)
    sessions: int = betterproto.uint32_field(2)
    num_prestiges: int = betterproto.uint32_field(3)
    soul_eggs: int = betterproto.uint64_field(4)
    current_egg: int = betterproto.uint32_field(5)
    gold_earned: int = betterproto.uint64_field(6)
    gold_spent: int = betterproto.uint64_field(7)
    current_mission: int = betterproto.uint32_field(8)
    piggy_size: int = betterproto.uint32_field(9)
    num_piggy_breaks: int = betterproto.uint64_field(10)
    verified_piggy_breaks: int = betterproto.uint64_field(29)
    iap_packs_purchased: int = betterproto.uint64_field(11)
    permit_level: int = betterproto.uint32_field(12)
    video_doubler_uses: int = betterproto.uint64_field(15)
    drone_takedowns: int = betterproto.uint64_field(18)
    drone_takedowns_elite: int = betterproto.uint64_field(19)
    trophies_unlocked: bool = betterproto.bool_field(20)
    egg_level: float = betterproto.float_field(21)
    struggle_factor: float = betterproto.float_field(22)
    piggy_full: bool = betterproto.bool_field(23)
    piggy_found_full: bool = betterproto.bool_field(24)
    time_piggy_full_realtime: float = betterproto.double_field(25)
    time_piggy_full_gametime: float = betterproto.double_field(26)
    lost_piggy_increments: int = betterproto.uint64_field(27)
    sale_id: str = betterproto.string_field(28)
    unlimited_chickens_uses: int = betterproto.uint64_field(13)
    refill_uses: int = betterproto.uint64_field(14)
    short_warp_uses: int = betterproto.uint64_field(16)
    long_warp_uses: int = betterproto.uint64_field(17)


@dataclass
class ActionKeyValuePair(betterproto.Message):
    key: str = betterproto.string_field(1)
    value: str = betterproto.string_field(2)


@dataclass
class GenericAction(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    cc_user: bool = betterproto.bool_field(9)
    advertising_id: str = betterproto.string_field(7)
    approx_time__d_e_p: float = betterproto.float_field(2)
    approx_time: float = betterproto.double_field(8)
    action_name: str = betterproto.string_field(3)
    data: List["ActionKeyValuePair"] = betterproto.message_field(4)
    app: "AppInfo" = betterproto.message_field(5)
    device: "DeviceInfo" = betterproto.message_field(6)


@dataclass
class GenericActionBatchRequest(betterproto.Message):
    rinfo: "BasicRequestInfo" = betterproto.message_field(1)
    actions: List["GenericAction"] = betterproto.message_field(2)


@dataclass
class VerifyPurchaseRequest(betterproto.Message):
    rinfo: "BasicRequestInfo" = betterproto.message_field(6)
    sku: str = betterproto.string_field(1)
    transaction_id: str = betterproto.string_field(2)
    original_transaction_id: str = betterproto.string_field(8)
    receipt: str = betterproto.string_field(3)
    platform: str = betterproto.string_field(4)
    sandbox: bool = betterproto.bool_field(7)
    log: "GenericAction" = betterproto.message_field(5)


@dataclass
class VerifyPurchaseResponse(betterproto.Message):
    verified: bool = betterproto.bool_field(1)
    message: str = betterproto.string_field(2)


@dataclass
class CurrencyFlowLog(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    approx_time: float = betterproto.double_field(2)
    currency: "RewardType" = betterproto.enum_field(3)
    amount: int = betterproto.int64_field(4)
    location: str = betterproto.string_field(5)
    version: str = betterproto.string_field(6)
    platform: str = betterproto.string_field(7)
    soul_eggs: float = betterproto.double_field(8)
    tickets_spent: int = betterproto.uint64_field(9)
    gold_spent: int = betterproto.uint64_field(10)


@dataclass
class CurrencyFlowBatchRequest(betterproto.Message):
    rinfo: "BasicRequestInfo" = betterproto.message_field(2)
    logs: List["CurrencyFlowLog"] = betterproto.message_field(1)


@dataclass
class Reward(betterproto.Message):
    reward_type: "RewardType" = betterproto.enum_field(1)
    reward_sub_type: str = betterproto.string_field(2)
    reward_amount: float = betterproto.double_field(3)


@dataclass
class GameModifier(betterproto.Message):
    dimension: "GameModifierGameDimension" = betterproto.enum_field(1)
    value: float = betterproto.double_field(2)
    description: str = betterproto.string_field(3)


@dataclass
class CustomEgg(betterproto.Message):
    identifier: str = betterproto.string_field(1)
    name: str = betterproto.string_field(2)
    description: str = betterproto.string_field(3)
    value: float = betterproto.double_field(4)
    hatchery_id: str = betterproto.string_field(5)
    hatchery_max_x: float = betterproto.double_field(6)
    icon: "DLCItem" = betterproto.message_field(7)
    icon_width: float = betterproto.double_field(21)
    icon_height: float = betterproto.double_field(22)
    buffs: List["GameModifier"] = betterproto.message_field(8)


@dataclass
class Contract(betterproto.Message):
    identifier: str = betterproto.string_field(1)
    name: str = betterproto.string_field(9)
    description: str = betterproto.string_field(10)
    egg: "Egg" = betterproto.enum_field(2)
    custom_egg_id: str = betterproto.string_field(25)
    goals: List["ContractGoal"] = betterproto.message_field(3)
    goal_sets: List["ContractGoalSet"] = betterproto.message_field(16)
    grade_specs: List["ContractGradeSpec"] = betterproto.message_field(20)
    season_id: str = betterproto.string_field(23)
    coop_allowed: bool = betterproto.bool_field(4)
    max_coop_size: int = betterproto.uint32_field(5)
    max_boosts: int = betterproto.uint32_field(12)
    minutes_per_token: float = betterproto.double_field(15)
    chicken_run_cooldown_minutes: float = betterproto.double_field(18)
    start_time: float = betterproto.double_field(17)
    expiration_time: float = betterproto.double_field(6)
    length_seconds: float = betterproto.double_field(7)
    max_soul_eggs: float = betterproto.double_field(13)
    min_client_version: int = betterproto.uint32_field(14)
    leggacy: bool = betterproto.bool_field(19)
    cc_only: bool = betterproto.bool_field(22)
    default_shell_ids: List[str] = betterproto.string_field(24)
    debug: bool = betterproto.bool_field(11)
    key: str = betterproto.string_field(21)


@dataclass
class ContractGoal(betterproto.Message):
    type: "GoalType" = betterproto.enum_field(1)
    target_amount: float = betterproto.double_field(2)
    reward_type: "RewardType" = betterproto.enum_field(3)
    reward_sub_type: str = betterproto.string_field(4)
    reward_amount: float = betterproto.double_field(5)
    target_soul_eggs: float = betterproto.double_field(6)


@dataclass
class ContractGoalSet(betterproto.Message):
    goals: List["ContractGoal"] = betterproto.message_field(1)


@dataclass
class ContractGradeSpec(betterproto.Message):
    grade: "ContractPlayerGrade" = betterproto.enum_field(1)
    goals: List["ContractGoal"] = betterproto.message_field(2)
    modifiers: List["GameModifier"] = betterproto.message_field(3)
    length_seconds: float = betterproto.double_field(4)


@dataclass
class ContractPlayerInfo(betterproto.Message):
    grade: "ContractPlayerGrade" = betterproto.enum_field(1)
    total_cxp: float = betterproto.double_field(2)
    season_cxp: float = betterproto.double_field(13)
    grade_score: float = betterproto.double_field(7)
    target_grade_score: float = betterproto.double_field(9)
    soul_power: float = betterproto.double_field(10)
    target_soul_power: float = betterproto.double_field(8)
    grade_progress: float = betterproto.double_field(12)
    issues: List["ContractEvaluationPoorBehavior"] = betterproto.enum_field(11)
    issue_score: float = betterproto.double_field(14)
    status: "ContractPlayerInfoStatus" = betterproto.enum_field(3)
    last_evaluation_time: float = betterproto.double_field(4)
    last_evaluation_version: str = betterproto.string_field(5)
    unread_evaluations: List["ContractEvaluation"] = betterproto.message_field(6)


@dataclass
class ContractEvaluation(betterproto.Message):
    contract_identifier: str = betterproto.string_field(40)
    coop_identifier: str = betterproto.string_field(41)
    cxp: float = betterproto.double_field(1)
    replay: bool = betterproto.bool_field(24)
    cxp_change: float = betterproto.double_field(25)
    grade_performance: int = betterproto.int32_field(2)
    old_league: int = betterproto.int32_field(9)
    old_goals: bool = betterproto.bool_field(10)
    grade: "ContractPlayerGrade" = betterproto.enum_field(3)
    contribution_ratio: float = betterproto.double_field(4)
    completion_percent: float = betterproto.double_field(5)
    original_length: float = betterproto.double_field(11)
    coop_size: int = betterproto.uint32_field(18)
    solo: bool = betterproto.bool_field(26)
    soul_power: float = betterproto.double_field(23)
    last_contribution_time: float = betterproto.double_field(22)
    completion_time: float = betterproto.double_field(6)
    chicken_runs_sent: int = betterproto.uint32_field(7)
    gift_tokens_sent: int = betterproto.uint32_field(8)
    gift_tokens_received: int = betterproto.uint32_field(15)
    gift_token_value_sent: float = betterproto.double_field(28)
    gift_token_value_received: float = betterproto.double_field(29)
    boost_token_allotment: int = betterproto.uint32_field(16)
    buff_time_value: float = betterproto.double_field(17)
    teamwork_score: float = betterproto.double_field(13)
    other_bonuses: float = betterproto.double_field(14)
    counted_in_season: bool = betterproto.bool_field(20)
    season_id: str = betterproto.string_field(21)
    time_cheats: int = betterproto.uint32_field(27)
    issues: List["ContractEvaluationPoorBehavior"] = betterproto.enum_field(19)
    notes: List[str] = betterproto.string_field(12)
    version: str = betterproto.string_field(50)
    evaluation_start_time: float = betterproto.double_field(51)
    status: "ContractEvaluationStatus" = betterproto.enum_field(52)


@dataclass
class ContractCitation(betterproto.Message):
    issue: "ContractEvaluationPoorBehavior" = betterproto.enum_field(1)
    timestamp: float = betterproto.double_field(2)
    grade: "ContractPlayerGrade" = betterproto.enum_field(3)


@dataclass
class ContractEvaluationBatch(betterproto.Message):
    evals: List["ContractEvaluationBatchPair"] = betterproto.message_field(1)


@dataclass
class ContractEvaluationBatchPair(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    cev: "ContractEvaluation" = betterproto.message_field(2)


@dataclass
class CoopCompletionSnapshot(betterproto.Message):
    contributors: List["CoopCompletionSnapshotContributorSnapshot"] = (
        betterproto.message_field(1)
    )


@dataclass
class CoopCompletionSnapshotContributorSnapshot(betterproto.Message):
    contribution: float = betterproto.double_field(1)
    last_contribution_time: float = betterproto.double_field(6)
    finalized: bool = betterproto.bool_field(7)
    soul_power: float = betterproto.double_field(2)
    user_id: str = betterproto.string_field(3)
    tokens: int = betterproto.uint32_field(4)
    tokens_spent: int = betterproto.uint32_field(5)


@dataclass
class BasicRequestInfo(betterproto.Message):
    ei_user_id: str = betterproto.string_field(1)
    client_version: int = betterproto.uint32_field(2)
    version: str = betterproto.string_field(3)
    build: str = betterproto.string_field(4)
    platform: str = betterproto.string_field(5)
    country: str = betterproto.string_field(6)
    language: str = betterproto.string_field(7)
    debug: bool = betterproto.bool_field(8)


@dataclass
class ContractSimConfig(betterproto.Message):
    grade_configs: List["ContractSimConfigContractGradeSimConfig"] = (
        betterproto.message_field(1)
    )


@dataclass
class ContractSimConfigContractGradeSimConfig(betterproto.Message):
    grade: "ContractPlayerGrade" = betterproto.enum_field(1)
    goal_params: List["ContractSimConfigContractGradeSimConfigGoalParams"] = (
        betterproto.message_field(2)
    )


@dataclass
class ContractSimConfigContractGradeSimConfigGoalParams(betterproto.Message):
    target_se: float = betterproto.double_field(1)
    cps_mult: float = betterproto.double_field(2)
    elr_mult: float = betterproto.double_field(7)
    earnings_mult: float = betterproto.double_field(3)
    time_efficacy: float = betterproto.double_field(4)
    hab_capacity_mult: float = betterproto.double_field(5)
    epic_research_budget: float = betterproto.double_field(6)


@dataclass
class ContractSimPoll(betterproto.Message):
    client_version: int = betterproto.uint32_field(1)


@dataclass
class ContractSimPollResponse(betterproto.Message):
    contract_to_simulate: "Contract" = betterproto.message_field(1)
    sim_config: "ContractSimConfig" = betterproto.message_field(2)


@dataclass
class ContractSimResultUpdate(betterproto.Message):
    contract_id: str = betterproto.string_field(1)
    goal_infos: List["ContractSimResultUpdateGoalInfo"] = betterproto.message_field(2)


@dataclass
class ContractSimResultUpdateGoalInfo(betterproto.Message):
    grade: "ContractPlayerGrade" = betterproto.enum_field(1)
    goal_index: int = betterproto.uint32_field(2)
    projected_eggs_laid: float = betterproto.double_field(3)


@dataclass
class ContractsRequest(betterproto.Message):
    soul_eggs: float = betterproto.double_field(1)
    client_version: int = betterproto.uint32_field(5)
    user_id: str = betterproto.string_field(2)


@dataclass
class ContractsResponse(betterproto.Message):
    contracts: List["Contract"] = betterproto.message_field(1)
    custom_eggs: List["CustomEgg"] = betterproto.message_field(6)
    warning_message: str = betterproto.string_field(4)
    total_eop: float = betterproto.double_field(5)
    server_time: float = betterproto.double_field(2)
    max_eop: int = betterproto.uint32_field(3)


@dataclass
class ContractCoopStatusRequest(betterproto.Message):
    rinfo: "BasicRequestInfo" = betterproto.message_field(5)
    contract_identifier: str = betterproto.string_field(1)
    coop_identifier: str = betterproto.string_field(2)
    user_id: str = betterproto.string_field(3)
    client_version: int = betterproto.uint32_field(4)


@dataclass
class FarmProductionParams(betterproto.Message):
    farm_population: float = betterproto.double_field(1)
    farm_capacity: float = betterproto.double_field(2)
    elr: float = betterproto.double_field(3)
    ihr: float = betterproto.double_field(4)
    sr: float = betterproto.double_field(5)
    delivered: float = betterproto.double_field(6)


@dataclass
class PlayerFarmInfo(betterproto.Message):
    client_version: int = betterproto.uint32_field(20)
    soul_eggs: float = betterproto.double_field(1)
    eggs_of_prophecy: int = betterproto.uint64_field(2)
    permit_level: int = betterproto.uint32_field(3)
    hyperloop_station: bool = betterproto.bool_field(4)
    egg_medal_level: List[int] = betterproto.uint32_field(5)
    epic_research: List["BackupResearchItem"] = betterproto.message_field(6)
    egg_type: "Egg" = betterproto.enum_field(7)
    cash_on_hand: float = betterproto.double_field(8)
    habs: List[int] = betterproto.uint32_field(9)
    hab_population: List[int] = betterproto.uint64_field(10)
    hab_capacity: List[int] = betterproto.uint64_field(21)
    vehicles: List[int] = betterproto.uint32_field(11)
    train_length: List[int] = betterproto.uint32_field(12)
    silos_owned: int = betterproto.uint32_field(13)
    common_research: List["BackupResearchItem"] = betterproto.message_field(14)
    active_boosts: List["BackupActiveBoost"] = betterproto.message_field(15)
    boost_tokens_on_hand: int = betterproto.uint32_field(16)
    equipped_artifacts: List["CompleteArtifact"] = betterproto.message_field(17)
    artifact_inventory_score: int = betterproto.uint64_field(18)
    farm_appearance: "ShellDBFarmConfiguration" = betterproto.message_field(19)
    timestamp: float = betterproto.double_field(22)


@dataclass
class ContractCoopStatusResponse(betterproto.Message):
    response_status: "ContractCoopStatusResponseResponseStatus" = (
        betterproto.enum_field(19)
    )
    contract_identifier: str = betterproto.string_field(1)
    total_amount: float = betterproto.double_field(2)
    coop_identifier: str = betterproto.string_field(3)
    grade: "ContractPlayerGrade" = betterproto.enum_field(17)
    contributors: List["ContractCoopStatusResponseContributionInfo"] = (
        betterproto.message_field(4)
    )
    auto_generated: bool = betterproto.bool_field(8)
    public: bool = betterproto.bool_field(10)
    creator_id: str = betterproto.string_field(9)
    seconds_remaining: float = betterproto.double_field(5)
    seconds_since_all_goals_achieved: float = betterproto.double_field(16)
    all_goals_achieved: bool = betterproto.bool_field(14)
    all_members_reporting: bool = betterproto.bool_field(6)
    grace_period_seconds_remaining: float = betterproto.double_field(7)
    cleared_for_exit: bool = betterproto.bool_field(15)
    gifts: List["ContractCoopStatusResponseCoopGift"] = betterproto.message_field(11)
    chicken_runs: List["ContractCoopStatusResponseChickenRun"] = (
        betterproto.message_field(13)
    )
    local_timestamp: float = betterproto.double_field(12)
    last_sync: float = betterproto.double_field(18)


@dataclass
class ContractCoopStatusResponseContributionInfo(betterproto.Message):
    uuid: str = betterproto.string_field(21)
    user_id: str = betterproto.string_field(1)
    user_name: str = betterproto.string_field(2)
    contract_identifier: str = betterproto.string_field(19)
    contribution_amount: float = betterproto.double_field(3)
    contribution_rate: float = betterproto.double_field(6)
    soul_power: float = betterproto.double_field(11)
    production_params: "FarmProductionParams" = betterproto.message_field(15)
    farm_info: "PlayerFarmInfo" = betterproto.message_field(18)
    rank_change: int = betterproto.int32_field(8)
    recently_active: bool = betterproto.bool_field(23)
    active: bool = betterproto.bool_field(4)
    cc_member: bool = betterproto.bool_field(24)
    leech: bool = betterproto.bool_field(16)
    finalized: bool = betterproto.bool_field(22)
    time_cheat_detected: bool = betterproto.bool_field(7)
    platform: "Platform" = betterproto.enum_field(5)
    push_id: str = betterproto.string_field(9)
    ban_votes: int = betterproto.uint32_field(10)
    autojoined: bool = betterproto.bool_field(17)
    boost_tokens: int = betterproto.uint32_field(12)
    boost_tokens_spent: int = betterproto.uint32_field(14)
    buff_history: List["CoopBuffState"] = betterproto.message_field(13)
    chicken_run_cooldown: float = betterproto.double_field(20)


@dataclass
class ContractCoopStatusResponseCoopGift(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    user_name: str = betterproto.string_field(3)
    amount: int = betterproto.uint32_field(2)
    tracking: str = betterproto.string_field(4)


@dataclass
class ContractCoopStatusResponseChickenRun(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    user_name: str = betterproto.string_field(3)
    amount: int = betterproto.uint64_field(2)


@dataclass
class LocalContract(betterproto.Message):
    contract: "Contract" = betterproto.message_field(1)
    coop_identifier: str = betterproto.string_field(2)
    accepted: bool = betterproto.bool_field(7)
    time_accepted: float = betterproto.double_field(3)
    cancelled: bool = betterproto.bool_field(4)
    new: bool = betterproto.bool_field(8)
    coop_shared_end_time: float = betterproto.double_field(5)
    coop_simulation_end_time: float = betterproto.double_field(22)
    coop_grace_period_end_time: float = betterproto.double_field(9)
    coop_contribution_finalized: bool = betterproto.bool_field(10)
    coop_last_uploaded_contribution: float = betterproto.double_field(11)
    coop_user_id: str = betterproto.string_field(13)
    coop_share_farm: bool = betterproto.bool_field(17)
    last_amount_when_reward_given: float = betterproto.double_field(6)
    num_goals_achieved: int = betterproto.uint32_field(14)
    max_farm_size_reached: float = betterproto.double_field(23)
    boosts_used: int = betterproto.uint32_field(12)
    points_replay: bool = betterproto.bool_field(20)
    league: int = betterproto.uint32_field(15)
    grade: "ContractPlayerGrade" = betterproto.enum_field(18)
    last_nag_time: float = betterproto.double_field(16)
    evaluation: "ContractEvaluation" = betterproto.message_field(19)
    reported_uuids: List[str] = betterproto.string_field(21)


@dataclass
class MyContracts(betterproto.Message):
    contract_ids_seen: List[str] = betterproto.string_field(3)
    contracts: List["LocalContract"] = betterproto.message_field(1)
    archive: List["LocalContract"] = betterproto.message_field(2)
    current_coop_statuses: List["ContractCoopStatusResponse"] = (
        betterproto.message_field(4)
    )
    last_cpi: "ContractPlayerInfo" = betterproto.message_field(5)
    initial_grade_revealed: bool = betterproto.bool_field(6)
    last_grade_progress_shown: float = betterproto.double_field(7)
    show_advanced_evaluations: bool = betterproto.bool_field(8)
    custom_egg_info: List["CustomEgg"] = betterproto.message_field(9)


@dataclass
class QueryCoopRequest(betterproto.Message):
    rinfo: "BasicRequestInfo" = betterproto.message_field(5)
    contract_identifier: str = betterproto.string_field(1)
    coop_identifier: str = betterproto.string_field(2)
    league: int = betterproto.uint32_field(4)
    grade: "ContractPlayerGrade" = betterproto.enum_field(6)
    client_version: int = betterproto.uint32_field(3)


@dataclass
class QueryCoopResponse(betterproto.Message):
    exists: bool = betterproto.bool_field(1)
    full: bool = betterproto.bool_field(2)
    expired: bool = betterproto.bool_field(5)
    different_league: bool = betterproto.bool_field(4)
    different_grade: bool = betterproto.bool_field(6)
    cc_only: bool = betterproto.bool_field(7)
    banned: bool = betterproto.bool_field(3)


@dataclass
class CreateCoopRequest(betterproto.Message):
    rinfo: "BasicRequestInfo" = betterproto.message_field(10)
    contract_identifier: str = betterproto.string_field(1)
    coop_identifier: str = betterproto.string_field(2)
    public: bool = betterproto.bool_field(13)
    cc_only: bool = betterproto.bool_field(14)
    allow_all_grades: bool = betterproto.bool_field(16)
    seconds_remaining: float = betterproto.double_field(3)
    user_id: str = betterproto.string_field(4)
    user_name: str = betterproto.string_field(5)
    soul_power: float = betterproto.double_field(8)
    eop: float = betterproto.double_field(11)
    league: int = betterproto.uint32_field(9)
    grade: "ContractPlayerGrade" = betterproto.enum_field(12)
    points_replay: bool = betterproto.bool_field(15)
    platform: "Platform" = betterproto.enum_field(6)
    client_version: int = betterproto.uint32_field(7)


@dataclass
class CreateCoopResponse(betterproto.Message):
    success: bool = betterproto.bool_field(1)
    message: str = betterproto.string_field(2)


@dataclass
class JoinCoopRequest(betterproto.Message):
    rinfo: "BasicRequestInfo" = betterproto.message_field(10)
    contract_identifier: str = betterproto.string_field(1)
    coop_identifier: str = betterproto.string_field(2)
    user_id: str = betterproto.string_field(3)
    user_name: str = betterproto.string_field(4)
    soul_power: float = betterproto.double_field(8)
    eop: float = betterproto.double_field(12)
    league: int = betterproto.uint32_field(9)
    grade: "ContractPlayerGrade" = betterproto.enum_field(13)
    points_replay: bool = betterproto.bool_field(14)
    platform: "Platform" = betterproto.enum_field(5)
    seconds_remaining: float = betterproto.double_field(11)
    client_version: int = betterproto.uint32_field(7)


@dataclass
class JoinCoopResponse(betterproto.Message):
    success: bool = betterproto.bool_field(1)
    message: str = betterproto.string_field(2)
    banned: bool = betterproto.bool_field(4)
    coop_identifier: str = betterproto.string_field(5)
    seconds_remaining: float = betterproto.double_field(3)
    match_percent: float = betterproto.double_field(6)
    num_members: int = betterproto.uint32_field(7)
    status: "ContractCoopStatusResponseStatus" = betterproto.enum_field(8)
    grade: "ContractPlayerGrade" = betterproto.enum_field(9)
    can_start: bool = betterproto.bool_field(10)


@dataclass
class AutoJoinCoopRequest(betterproto.Message):
    rinfo: "BasicRequestInfo" = betterproto.message_field(9)
    contract_identifier: str = betterproto.string_field(1)
    user_id: str = betterproto.string_field(2)
    user_name: str = betterproto.string_field(3)
    soul_power: float = betterproto.double_field(4)
    eop: float = betterproto.double_field(10)
    league: int = betterproto.uint32_field(8)
    grade: "ContractPlayerGrade" = betterproto.enum_field(12)
    points_replay: bool = betterproto.bool_field(14)
    seconds_remaining: float = betterproto.double_field(5)
    platform: "Platform" = betterproto.enum_field(6)
    client_version: int = betterproto.uint32_field(7)


@dataclass
class UpdateCoopPermissionsRequest(betterproto.Message):
    rinfo: "BasicRequestInfo" = betterproto.message_field(6)
    contract_identifier: str = betterproto.string_field(1)
    coop_identifier: str = betterproto.string_field(2)
    requesting_user_id: str = betterproto.string_field(3)
    public: bool = betterproto.bool_field(4)
    client_version: int = betterproto.uint32_field(5)


@dataclass
class UpdateCoopPermissionsResponse(betterproto.Message):
    success: bool = betterproto.bool_field(1)
    message: str = betterproto.string_field(2)


@dataclass
class LeaveCoopRequest(betterproto.Message):
    rinfo: "BasicRequestInfo" = betterproto.message_field(8)
    contract_identifier: str = betterproto.string_field(1)
    coop_identifier: str = betterproto.string_field(2)
    player_identifier: str = betterproto.string_field(3)
    client_version: int = betterproto.uint32_field(7)


@dataclass
class GiftPlayerCoopRequest(betterproto.Message):
    rinfo: "BasicRequestInfo" = betterproto.message_field(8)
    contract_identifier: str = betterproto.string_field(1)
    coop_identifier: str = betterproto.string_field(2)
    player_identifier: str = betterproto.string_field(3)
    requesting_user_id: str = betterproto.string_field(4)
    requesting_user_name: str = betterproto.string_field(6)
    amount: int = betterproto.uint32_field(5)
    client_version: int = betterproto.uint32_field(7)


@dataclass
class SendChickenRunCoopRequest(betterproto.Message):
    rinfo: "BasicRequestInfo" = betterproto.message_field(8)
    contract_identifier: str = betterproto.string_field(1)
    coop_identifier: str = betterproto.string_field(2)
    player_identifier: str = betterproto.string_field(3)
    requesting_user_id: str = betterproto.string_field(4)
    requesting_user_name: str = betterproto.string_field(6)
    farm_pop: int = betterproto.uint64_field(5)
    client_version: int = betterproto.uint32_field(7)


@dataclass
class ReportPlayerCoopRequest(betterproto.Message):
    rinfo: "BasicRequestInfo" = betterproto.message_field(1)
    contract_identifier: str = betterproto.string_field(2)
    coop_identifier: str = betterproto.string_field(3)
    user_id: str = betterproto.string_field(4)
    reason: "ReportPlayerCoopRequestReason" = betterproto.enum_field(5)


@dataclass
class KickPlayerCoopRequest(betterproto.Message):
    rinfo: "BasicRequestInfo" = betterproto.message_field(8)
    contract_identifier: str = betterproto.string_field(1)
    coop_identifier: str = betterproto.string_field(2)
    player_identifier: str = betterproto.string_field(3)
    requesting_user_id: str = betterproto.string_field(4)
    reason: "KickPlayerCoopRequestReason" = betterproto.enum_field(9)
    client_version: int = betterproto.uint32_field(7)


@dataclass
class ContractCoopStatusUpdateRequest(betterproto.Message):
    rinfo: "BasicRequestInfo" = betterproto.message_field(12)
    user_id: str = betterproto.string_field(1)
    contract_identifier: str = betterproto.string_field(2)
    coop_identifier: str = betterproto.string_field(3)
    push_user_id: str = betterproto.string_field(8)
    amount: float = betterproto.double_field(4)
    rate: float = betterproto.double_field(5)
    time_cheats_detected: int = betterproto.uint32_field(6)
    soul_power: float = betterproto.double_field(7)
    eop: int = betterproto.uint32_field(15)
    boost_tokens: int = betterproto.uint32_field(9)
    boost_tokens_spent: int = betterproto.uint32_field(13)
    hide_cc_status: bool = betterproto.bool_field(17)
    production_params: "FarmProductionParams" = betterproto.message_field(14)
    farm_info: "PlayerFarmInfo" = betterproto.message_field(16)
    egg_laying_rate_buff: float = betterproto.double_field(10)
    earnings_buff: float = betterproto.double_field(11)


@dataclass
class ContractCoopStatusUpdateResponse(betterproto.Message):
    finalized: bool = betterproto.bool_field(1)
    exists: bool = betterproto.bool_field(2)
    status: "ContractCoopStatusResponseMemberStatus" = betterproto.enum_field(3)


@dataclass
class CoopBuffState(betterproto.Message):
    egg_laying_rate: float = betterproto.double_field(1)
    earnings: float = betterproto.double_field(2)
    server_timestamp: float = betterproto.double_field(3)


@dataclass
class CoopBuffHistory(betterproto.Message):
    history: List["CoopBuffState"] = betterproto.message_field(1)


@dataclass
class CoopChickenRunEntry(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    server_timestamp: float = betterproto.double_field(2)


@dataclass
class CoopLastChickenRunTimes(betterproto.Message):
    entries: List["CoopChickenRunEntry"] = betterproto.message_field(3)


@dataclass
class LeaderboardAnalysis(betterproto.Message):
    chunks: List["LeaderboardAnalysisChunk"] = betterproto.message_field(1)
    count: int = betterproto.uint32_field(2)
    high_score: float = betterproto.double_field(3)
    low_score: float = betterproto.double_field(4)
    cursor: str = betterproto.string_field(5)


@dataclass
class LeaderboardAnalysisChunk(betterproto.Message):
    start_index: int = betterproto.uint32_field(1)
    end_index: int = betterproto.uint32_field(2)
    high_score: float = betterproto.double_field(3)
    low_score: float = betterproto.double_field(4)
    start_cursor: str = betterproto.string_field(5)
    end_cursor: str = betterproto.string_field(6)


@dataclass
class LeaderboardInfo(betterproto.Message):
    seasons: List["LeaderboardInfoSeason"] = betterproto.message_field(1)
    all_time_scope: str = betterproto.string_field(2)


@dataclass
class LeaderboardInfoSeason(betterproto.Message):
    scope: str = betterproto.string_field(1)
    name: str = betterproto.string_field(2)


@dataclass
class LeaderboardRequest(betterproto.Message):
    rinfo: "BasicRequestInfo" = betterproto.message_field(1)
    scope: str = betterproto.string_field(2)
    grade: "ContractPlayerGrade" = betterproto.enum_field(3)


@dataclass
class LeaderboardResponse(betterproto.Message):
    scope: str = betterproto.string_field(1)
    grade: "ContractPlayerGrade" = betterproto.enum_field(2)
    top_entries: List["LeaderboardResponseEntry"] = betterproto.message_field(3)
    count: int = betterproto.uint32_field(4)
    rank: int = betterproto.uint32_field(5)
    score: float = betterproto.double_field(6)


@dataclass
class LeaderboardResponseEntry(betterproto.Message):
    rank: int = betterproto.uint32_field(1)
    alias: str = betterproto.string_field(2)
    score: float = betterproto.double_field(3)


@dataclass
class ContractsArchive(betterproto.Message):
    archive: List["LocalContract"] = betterproto.message_field(1)


@dataclass
class ContractAction(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    action_name: str = betterproto.string_field(2)
    approx_time: float = betterproto.double_field(3)
    dest_user_id: str = betterproto.string_field(4)
    contract_id: str = betterproto.string_field(5)
    coop_id: str = betterproto.string_field(6)
    autojoin: bool = betterproto.bool_field(7)
    grade: int = betterproto.uint32_field(8)
    replay: bool = betterproto.bool_field(9)
    points_replay: bool = betterproto.bool_field(10)
    reward_type: int = betterproto.uint32_field(11)
    reward_subtype: str = betterproto.string_field(12)
    reward_amount: float = betterproto.double_field(13)
    goal_index: int = betterproto.uint32_field(14)
    boost_id: str = betterproto.string_field(15)
    tokens: int = betterproto.uint32_field(16)
    kick_reason: int = betterproto.uint32_field(17)
    public: bool = betterproto.bool_field(18)
    cc_only: bool = betterproto.bool_field(19)


@dataclass
class UserDataInfoRequest(betterproto.Message):
    rinfo: "BasicRequestInfo" = betterproto.message_field(4)
    user_id: str = betterproto.string_field(1)
    device_id: str = betterproto.string_field(2)
    backup_checksum: int = betterproto.uint64_field(3)


@dataclass
class UserDataInfoResponse(betterproto.Message):
    backup_checksum: int = betterproto.uint64_field(1)
    backup_total_cash: float = betterproto.double_field(2)
    coop_memberships: List[str] = betterproto.string_field(3)


@dataclass
class ClearAllUserDataRequest(betterproto.Message):
    rinfo: "BasicRequestInfo" = betterproto.message_field(4)
    user_id: str = betterproto.string_field(1)
    device_id: str = betterproto.string_field(2)
    backup_checksum: int = betterproto.uint64_field(3)


@dataclass
class ServerGift(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    reward_type: "RewardType" = betterproto.enum_field(3)
    reward_sub_type: str = betterproto.string_field(4)
    reward_amount: float = betterproto.double_field(5)


@dataclass
class LiveConfig(betterproto.Message):
    config_id: str = betterproto.string_field(1)
    boosts_config: "LiveConfigBoostsConfig" = betterproto.message_field(2)
    gift_config: "LiveConfigGiftConfig" = betterproto.message_field(3)
    misc_config: "LiveConfigMiscConfig" = betterproto.message_field(4)
    help_config: "LiveConfigHelpConfig" = betterproto.message_field(5)


@dataclass
class LiveConfigBoostsConfig(betterproto.Message):
    item_configs: List["LiveConfigBoostsConfigItemConfig"] = betterproto.message_field(
        1
    )
    cash_boost_cooloff_time: float = betterproto.double_field(2)


@dataclass
class LiveConfigBoostsConfigItemConfig(betterproto.Message):
    boost_id: str = betterproto.string_field(1)
    price: int = betterproto.uint32_field(2)
    token_price: int = betterproto.uint32_field(3)
    se_required: float = betterproto.double_field(4)


@dataclass
class LiveConfigGiftConfig(betterproto.Message):
    gift_configs: List["LiveConfigGiftConfigGiftValueConfig"] = (
        betterproto.message_field(9)
    )
    gift_mu_min_spent: float = betterproto.double_field(10)
    gift_mu_max_spent: float = betterproto.double_field(11)
    gift_mu_overall_mult: float = betterproto.double_field(12)
    random_gift_mu_config: "LiveConfigGiftConfigGiftMuConfig" = (
        betterproto.message_field(15)
    )
    video_gift_mu_config: "LiveConfigGiftConfigGiftMuConfig" = (
        betterproto.message_field(16)
    )
    package_interval: float = betterproto.double_field(1)
    video_offer_interval: float = betterproto.double_field(2)
    video_offer_interval_contract: float = betterproto.double_field(3)
    video_offer_interval_piggy_full: float = betterproto.double_field(4)
    video_offer_interval_piggy_extra_full: float = betterproto.double_field(5)
    video_reset_on_idle: bool = betterproto.bool_field(14)
    package_interval_contract: float = betterproto.double_field(6)
    package_interval_piggy_full: float = betterproto.double_field(7)
    package_interval_piggy_extra_full: float = betterproto.double_field(8)
    package_reset_on_idle: bool = betterproto.bool_field(13)


@dataclass
class LiveConfigGiftConfigGiftValueConfig(betterproto.Message):
    gift_id: str = betterproto.string_field(1)
    amount: float = betterproto.double_field(4)
    rand_min: float = betterproto.double_field(2)
    rand_max: float = betterproto.double_field(3)
    video_min: float = betterproto.double_field(5)
    video_max: float = betterproto.double_field(6)


@dataclass
class LiveConfigGiftConfigGiftMuConfig(betterproto.Message):
    min_spent: float = betterproto.double_field(1)
    max_spent: float = betterproto.double_field(2)
    overall_mult: float = betterproto.double_field(3)


@dataclass
class LiveConfigMiscConfig(betterproto.Message):
    ask_to_track: bool = betterproto.bool_field(1)
    ask_to_track_min_soul_eggs: float = betterproto.double_field(2)
    ask_to_track_message: str = betterproto.string_field(3)
    ask_to_track_show_pre_dialog: bool = betterproto.bool_field(4)
    ask_to_track_after_privacy: bool = betterproto.bool_field(5)
    chicken_run_boost_percentage: float = betterproto.double_field(6)
    shells_intro_tickets: int = betterproto.uint32_field(7)
    shells_max_free_chicken_configs: int = betterproto.uint32_field(8)
    shells_intro_alert_threshold: int = betterproto.uint32_field(9)
    shells_lighting_controls_price: int = betterproto.uint32_field(14)
    contracts_expert_league_min_soul_power: float = betterproto.double_field(10)
    new_player_event_duration: float = betterproto.double_field(11)
    contracts_club_available: bool = betterproto.bool_field(12)
    contracts_beta: bool = betterproto.bool_field(13)


@dataclass
class LiveConfigHelpConfig(betterproto.Message):
    video_infos: List["LiveConfigHelpConfigHowToVideoInfo"] = betterproto.message_field(
        1
    )


@dataclass
class LiveConfigHelpConfigHowToVideoInfo(betterproto.Message):
    type: "LiveConfigHelpConfigHowToVideoInfoType" = betterproto.enum_field(6)
    name: str = betterproto.string_field(1)
    description: str = betterproto.string_field(2)
    duration: str = betterproto.string_field(5)
    url: str = betterproto.string_field(3)
    soul_eggs: float = betterproto.double_field(4)


@dataclass
class InGameMail(betterproto.Message):
    id: str = betterproto.string_field(1)
    title: str = betterproto.string_field(2)
    date: str = betterproto.string_field(8)
    message: str = betterproto.string_field(3)
    action: str = betterproto.string_field(4)
    url: str = betterproto.string_field(5)
    app_link: "UILocation" = betterproto.enum_field(14)
    app_link_extra: str = betterproto.string_field(15)
    image: "DLCItem" = betterproto.message_field(16)
    image_width: float = betterproto.double_field(21)
    image_height: float = betterproto.double_field(22)
    platform: int = betterproto.uint32_field(7)
    builds: List[str] = betterproto.string_field(9)
    min_client_version: int = betterproto.uint32_field(10)
    max_client_version: int = betterproto.uint32_field(12)
    min_soul_eggs: float = betterproto.double_field(11)
    max_soul_eggs: float = betterproto.double_field(29)
    min_mystical_bonus: float = betterproto.double_field(13)
    user_type: "UserType" = betterproto.enum_field(17)
    min_piggy_breaks: int = betterproto.uint32_field(20)
    gold_tip: float = betterproto.double_field(6)
    tip: bool = betterproto.bool_field(23)
    priority: int = betterproto.uint32_field(27)
    min_days_since_last_tip: float = betterproto.double_field(24)
    max_retries: int = betterproto.uint32_field(25)
    days_until_retry: float = betterproto.double_field(26)
    category: str = betterproto.string_field(28)


@dataclass
class MailDB(betterproto.Message):
    mail: List["InGameMail"] = betterproto.message_field(1)
    tips_db_data: bytes = betterproto.bytes_field(2)
    tips_checksum: str = betterproto.string_field(3)


@dataclass
class TipsDB(betterproto.Message):
    tips: List["InGameMail"] = betterproto.message_field(1)


@dataclass
class MailState(betterproto.Message):
    read_mail_ids: List[str] = betterproto.string_field(1)
    tips_states: List["MailStateTipState"] = betterproto.message_field(2)
    tips_checksum: str = betterproto.string_field(3)


@dataclass
class MailStateTipState(betterproto.Message):
    id: str = betterproto.string_field(1)
    reads: int = betterproto.uint32_field(2)
    time_read: float = betterproto.double_field(3)


@dataclass
class PeriodicalsResponse(betterproto.Message):
    sales: "SalesInfo" = betterproto.message_field(1)
    events: "EggIncCurrentEvents" = betterproto.message_field(2)
    contracts: "ContractsResponse" = betterproto.message_field(3)
    evaluations: List["ContractEvaluation"] = betterproto.message_field(8)
    gifts: List["ServerGift"] = betterproto.message_field(4)
    artifact_cases: List["CompleteMissionResponse"] = betterproto.message_field(9)
    live_config: "LiveConfig" = betterproto.message_field(5)
    mail_bag: "MailDB" = betterproto.message_field(6)
    contract_player_info: "ContractPlayerInfo" = betterproto.message_field(7)
    showcase_royalties: List["PeriodicalsResponseRoyaltyInfo"] = (
        betterproto.message_field(10)
    )


@dataclass
class PeriodicalsResponseRoyaltyInfo(betterproto.Message):
    id: str = betterproto.string_field(1)
    amount: int = betterproto.uint32_field(2)


@dataclass
class GetPeriodicalsRequest(betterproto.Message):
    rinfo: "BasicRequestInfo" = betterproto.message_field(12)
    user_id: str = betterproto.string_field(1)
    piggy_full: bool = betterproto.bool_field(2)
    piggy_found_full: bool = betterproto.bool_field(3)
    seconds_full_realtime: float = betterproto.double_field(4)
    seconds_full_gametime: float = betterproto.double_field(5)
    lost_increments: int = betterproto.uint32_field(7)
    soul_eggs: float = betterproto.double_field(8)
    mystical_earnings_mult: float = betterproto.double_field(13)
    eop: int = betterproto.uint32_field(14)
    contracts_unlocked: bool = betterproto.bool_field(15)
    artifacts_unlocked: bool = betterproto.bool_field(16)
    current_client_version: int = betterproto.uint32_field(10)
    debug: bool = betterproto.bool_field(11)


@dataclass
class ConfigRequest(betterproto.Message):
    rinfo: "BasicRequestInfo" = betterproto.message_field(1)
    soul_eggs: float = betterproto.double_field(2)
    contracts_unlocked: bool = betterproto.bool_field(5)
    artifacts_unlocked: bool = betterproto.bool_field(3)
    fuel_tank_unlocked: bool = betterproto.bool_field(4)
    pro_permit: bool = betterproto.bool_field(6)
    ultra: bool = betterproto.bool_field(7)
    tips_checksum: str = betterproto.string_field(8)


@dataclass
class ConfigResponse(betterproto.Message):
    live_config: "LiveConfig" = betterproto.message_field(1)
    mail_bag: "MailDB" = betterproto.message_field(2)
    dlc_catalog: "DLCCatalog" = betterproto.message_field(3)


@dataclass
class AdAttributionRawData(betterproto.Message):
    device_ad_id: str = betterproto.string_field(1)
    user_id: str = betterproto.string_field(4)
    ad_network: str = betterproto.string_field(2)
    json_data: str = betterproto.string_field(3)


@dataclass
class AdAttributionRow(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    ad_id: str = betterproto.string_field(2)
    ad_network: str = betterproto.string_field(3)
    campaign: str = betterproto.string_field(4)
    keyword: str = betterproto.string_field(5)
    extra: str = betterproto.string_field(6)
    click_date: float = betterproto.float_field(7)
    download_date: float = betterproto.float_field(8)
    approx_time: float = betterproto.float_field(9)


@dataclass
class AdAttributionInfo(betterproto.Message):
    device_ad_id: str = betterproto.string_field(1)
    network_name: str = betterproto.string_field(2)
    attribution: bool = betterproto.bool_field(3)
    org_name: str = betterproto.string_field(4)
    org_id: str = betterproto.string_field(5)
    campaign_name: str = betterproto.string_field(6)
    campaign_id: str = betterproto.string_field(7)
    click_date: str = betterproto.string_field(8)
    conversion_date: str = betterproto.string_field(9)
    conversion_type: str = betterproto.string_field(10)
    geo: str = betterproto.string_field(11)
    adgroup_name: str = betterproto.string_field(12)
    adgroup_id: str = betterproto.string_field(13)
    keyword: str = betterproto.string_field(14)
    keyword_id: str = betterproto.string_field(15)
    keyword_extra: str = betterproto.string_field(16)
    creativeset_name: str = betterproto.string_field(17)
    creativeset_id: str = betterproto.string_field(18)


@dataclass
class ArtifactsClientInfo(betterproto.Message):
    mission_capacity_mult: float = betterproto.double_field(1)
    mission_duration_mult: float = betterproto.double_field(2)
    mission_ftl_duration_research_mult: float = betterproto.double_field(4)
    mission_capacity_research_mult: float = betterproto.double_field(6)
    launch_counts: List["ArtifactsClientInfoLaunchCount"] = betterproto.message_field(3)
    last_server_launch_count_sum_time: float = betterproto.double_field(5)


@dataclass
class ArtifactsClientInfoLaunchCount(betterproto.Message):
    ship: "MissionInfoSpaceship" = betterproto.enum_field(1)
    num_launches: int = betterproto.uint32_field(2)
    launch_points: float = betterproto.double_field(3)


@dataclass
class MissionInfo(betterproto.Message):
    ship: "MissionInfoSpaceship" = betterproto.enum_field(1)
    status: "MissionInfoStatus" = betterproto.enum_field(2)
    duration_type: "MissionInfoDurationType" = betterproto.enum_field(3)
    fuel: List["MissionInfoFuel"] = betterproto.message_field(4)
    level: int = betterproto.uint32_field(12)
    duration_seconds: float = betterproto.double_field(5)
    capacity: int = betterproto.uint32_field(9)
    quality_bump: float = betterproto.double_field(11)
    target_artifact: "ArtifactSpecName" = betterproto.enum_field(13)
    seconds_remaining: float = betterproto.double_field(6)
    start_time_derived: float = betterproto.double_field(8)
    mission_log: str = betterproto.string_field(10)
    identifier: str = betterproto.string_field(7)


@dataclass
class MissionInfoFuel(betterproto.Message):
    egg: "Egg" = betterproto.enum_field(1)
    amount: float = betterproto.double_field(2)


@dataclass
class ArtifactSpec(betterproto.Message):
    name: "ArtifactSpecName" = betterproto.enum_field(1)
    level: "ArtifactSpecLevel" = betterproto.enum_field(2)
    rarity: "ArtifactSpecRarity" = betterproto.enum_field(3)
    egg: "Egg" = betterproto.enum_field(4)


@dataclass
class CompleteArtifact(betterproto.Message):
    spec: "ArtifactSpec" = betterproto.message_field(1)
    stones: List["ArtifactSpec"] = betterproto.message_field(2)


@dataclass
class ArtifactInventoryItem(betterproto.Message):
    item_id: int = betterproto.uint64_field(1)
    artifact: "CompleteArtifact" = betterproto.message_field(2)
    quantity: float = betterproto.double_field(3)
    server_id: str = betterproto.string_field(4)


@dataclass
class InventorySlot(betterproto.Message):
    occupied: bool = betterproto.bool_field(1)
    item_id: int = betterproto.uint32_field(2)


@dataclass
class ArtifactsConfigurationRequest(betterproto.Message):
    rinfo: "BasicRequestInfo" = betterproto.message_field(2)
    client_version: int = betterproto.uint32_field(1)


@dataclass
class ArtifactsConfigurationResponse(betterproto.Message):
    mission_parameters: List["ArtifactsConfigurationResponseMissionParameters"] = (
        betterproto.message_field(1)
    )
    artifact_parameters: List["ArtifactsConfigurationResponseArtifactParameters"] = (
        betterproto.message_field(2)
    )
    crafting_level_infos: List["ArtifactsConfigurationResponseCraftingLevelInfo"] = (
        betterproto.message_field(3)
    )


@dataclass
class ArtifactsConfigurationResponseMissionParameters(betterproto.Message):
    ship: "MissionInfoSpaceship" = betterproto.enum_field(1)
    durations: List["ArtifactsConfigurationResponseMissionParametersDuration"] = (
        betterproto.message_field(3)
    )
    level_mission_requirements: List[int] = betterproto.uint32_field(4)
    capacity__d_e_p_r_e_c_a_t_e_d: int = betterproto.uint32_field(2)


@dataclass
class ArtifactsConfigurationResponseMissionParametersDuration(betterproto.Message):
    duration_type: "MissionInfoDurationType" = betterproto.enum_field(1)
    seconds: float = betterproto.double_field(2)
    quality: float = betterproto.float_field(3)
    min_quality: float = betterproto.float_field(4)
    max_quality: float = betterproto.float_field(5)
    capacity: int = betterproto.uint32_field(6)
    level_capacity_bump: int = betterproto.uint32_field(7)
    level_quality_bump: float = betterproto.float_field(8)


@dataclass
class ArtifactsConfigurationResponseArtifactParameters(betterproto.Message):
    spec: "ArtifactSpec" = betterproto.message_field(1)
    base_quality: float = betterproto.double_field(2)
    odds_multiplier: float = betterproto.double_field(4)
    value: float = betterproto.double_field(3)
    crafting_price: float = betterproto.double_field(5)
    crafting_price_low: float = betterproto.double_field(6)
    crafting_price_domain: int = betterproto.uint32_field(7)
    crafting_price_curve: float = betterproto.double_field(8)
    crafting_xp: int = betterproto.uint64_field(9)


@dataclass
class ArtifactsConfigurationResponseCraftingLevelInfo(betterproto.Message):
    xp_required: float = betterproto.double_field(1)
    rarity_mult: float = betterproto.float_field(2)


@dataclass
class MissionRequest(betterproto.Message):
    rinfo: "BasicRequestInfo" = betterproto.message_field(4)
    client_version: int = betterproto.uint32_field(1)
    ei_user_id: str = betterproto.string_field(3)
    info: "MissionInfo" = betterproto.message_field(2)
    client_info: "ArtifactsClientInfo" = betterproto.message_field(5)


@dataclass
class MissionResponse(betterproto.Message):
    success: bool = betterproto.bool_field(1)
    info: "MissionInfo" = betterproto.message_field(2)


@dataclass
class GetActiveMissionsResponse(betterproto.Message):
    success: bool = betterproto.bool_field(1)
    active_missions: List["MissionInfo"] = betterproto.message_field(2)


@dataclass
class CompleteMissionResponse(betterproto.Message):
    success: bool = betterproto.bool_field(1)
    info: "MissionInfo" = betterproto.message_field(2)
    artifacts: List["CompleteMissionResponseSecureArtifactSpec"] = (
        betterproto.message_field(3)
    )
    other_rewards: List["Reward"] = betterproto.message_field(4)
    ei_user_id: str = betterproto.string_field(5)


@dataclass
class CompleteMissionResponseSecureArtifactSpec(betterproto.Message):
    spec: "ArtifactSpec" = betterproto.message_field(1)
    server_id: str = betterproto.string_field(2)


@dataclass
class CollectContractArtifactRewardsRequest(betterproto.Message):
    rinfo: "BasicRequestInfo" = betterproto.message_field(1)
    contract_identifier: str = betterproto.string_field(2)
    league: int = betterproto.uint32_field(5)
    grade: "ContractPlayerGrade" = betterproto.enum_field(6)
    goal_index: int = betterproto.uint32_field(3)
    best_ship: "MissionInfoSpaceship" = betterproto.enum_field(4)


@dataclass
class CraftArtifactRequest(betterproto.Message):
    rinfo: "BasicRequestInfo" = betterproto.message_field(5)
    ei_user_id: str = betterproto.string_field(1)
    spec: "ArtifactSpec" = betterproto.message_field(2)
    item_id: int = betterproto.uint64_field(3)
    gold_price_paid: float = betterproto.double_field(6)
    crafting_count: int = betterproto.uint32_field(7)
    crafting_xp: float = betterproto.double_field(8)
    ingredients: List["ArtifactInventoryItem"] = betterproto.message_field(4)


@dataclass
class CraftArtifactResponse(betterproto.Message):
    item_id: int = betterproto.uint64_field(1)
    ei_user_id: str = betterproto.string_field(5)
    rarity_achieved: "ArtifactSpecRarity" = betterproto.enum_field(2)
    server_id: str = betterproto.string_field(3)


@dataclass
class ConsumeArtifactRequest(betterproto.Message):
    rinfo: "BasicRequestInfo" = betterproto.message_field(4)
    ei_user_id: str = betterproto.string_field(3)
    spec: "ArtifactSpec" = betterproto.message_field(1)
    artifact_server_id: str = betterproto.string_field(5)
    original_item_id: int = betterproto.uint64_field(2)
    additional_server_ids: List[str] = betterproto.string_field(7)
    additional_item_ids: List[int] = betterproto.uint64_field(8)
    quantity: int = betterproto.uint32_field(6)


@dataclass
class ConsumeArtifactResponse(betterproto.Message):
    success: bool = betterproto.bool_field(1)
    original_item_id: int = betterproto.uint64_field(2)
    additional_item_ids: List[int] = betterproto.uint64_field(6)
    byproducts: List["ArtifactSpec"] = betterproto.message_field(3)
    other_rewards: List["Reward"] = betterproto.message_field(4)
    ei_user_id: str = betterproto.string_field(5)


@dataclass
class AuthenticateArtifactResponse(betterproto.Message):
    success: bool = betterproto.bool_field(1)
    original_item_id: int = betterproto.uint64_field(2)
    demote: bool = betterproto.bool_field(3)
    delete: bool = betterproto.bool_field(4)
    ei_user_id: str = betterproto.string_field(5)


@dataclass
class SetArtifactRequest(betterproto.Message):
    rinfo: "BasicRequestInfo" = betterproto.message_field(1)
    artifact: "ArtifactInventoryItem" = betterproto.message_field(2)
    stones: List["ArtifactSpec"] = betterproto.message_field(3)
    gold_price_paid: float = betterproto.double_field(4)


@dataclass
class SetArtifactResponse(betterproto.Message):
    success: bool = betterproto.bool_field(1)
    original_item_id: int = betterproto.uint64_field(2)
    ei_user_id: str = betterproto.string_field(5)


@dataclass
class ArtifactsDB(betterproto.Message):
    inventory_items: List["ArtifactInventoryItem"] = betterproto.message_field(1)
    item_sequence: int = betterproto.uint64_field(2)
    inventory_slots: List["InventorySlot"] = betterproto.message_field(3)
    active_artifacts__d_e_p_r_e_c_a_t_e_d: List["ArtifactsDBActiveArtifactSlot"] = (
        betterproto.message_field(7)
    )
    active_artifact_sets: List["ArtifactsDBActiveArtifactSet"] = (
        betterproto.message_field(11)
    )
    saved_artifact_sets: List["ArtifactsDBActiveArtifactSet"] = (
        betterproto.message_field(13)
    )
    artifact_status: List["ArtifactsDBCraftableArtifact"] = betterproto.message_field(
        12
    )
    fueling_mission: "MissionInfo" = betterproto.message_field(14)
    mission_infos: List["MissionInfo"] = betterproto.message_field(4)
    mission_archive: List["MissionInfo"] = betterproto.message_field(5)
    discovered_artifacts__d_e_p_r_e_c_a_t_e_d: List["ArtifactSpec"] = (
        betterproto.message_field(8)
    )
    craftable_artifacts__d_e_p_r_e_c_a_t_e_d: List["ArtifactsDBCraftableArtifact"] = (
        betterproto.message_field(9)
    )
    crafting_counts__d_e_p_r_e_c_a_t_e_d: List["ArtifactsDBCraftableArtifact"] = (
        betterproto.message_field(10)
    )


@dataclass
class ArtifactsDBActiveArtifactSlot(betterproto.Message):
    occupied: bool = betterproto.bool_field(1)
    item_id: int = betterproto.uint64_field(2)


@dataclass
class ArtifactsDBActiveArtifactSet(betterproto.Message):
    slots: List["ArtifactsDBActiveArtifactSlot"] = betterproto.message_field(1)
    uid: int = betterproto.uint32_field(2)


@dataclass
class ArtifactsDBCraftableArtifact(betterproto.Message):
    spec: "ArtifactSpec" = betterproto.message_field(1)
    discovered: bool = betterproto.bool_field(6)
    craftable: bool = betterproto.bool_field(4)
    recipe_discovered: bool = betterproto.bool_field(5)
    seen: bool = betterproto.bool_field(2)
    count: int = betterproto.uint32_field(3)


@dataclass
class AuthenticatedMessage(betterproto.Message):
    message: bytes = betterproto.bytes_field(1)
    version: int = betterproto.uint32_field(3)
    code: str = betterproto.string_field(2)
    compressed: bool = betterproto.bool_field(4)
    original_size: int = betterproto.uint32_field(5)
    user_id: str = betterproto.string_field(6)


@dataclass
class LogCompleteMissionPayload(betterproto.Message):
    req: "MissionRequest" = betterproto.message_field(1)
    res: "CompleteMissionResponse" = betterproto.message_field(2)


@dataclass
class LogCraftArtifactPayload(betterproto.Message):
    req: "CraftArtifactRequest" = betterproto.message_field(1)
    res: "CraftArtifactResponse" = betterproto.message_field(2)


@dataclass
class LogConsumeArtifactPayload(betterproto.Message):
    req: "ConsumeArtifactRequest" = betterproto.message_field(1)
    res: "ConsumeArtifactResponse" = betterproto.message_field(2)


@dataclass
class LogSetArtifactPayload(betterproto.Message):
    req: "SetArtifactRequest" = betterproto.message_field(1)
    res: "SetArtifactResponse" = betterproto.message_field(2)


@dataclass
class AccountTransferPayload(betterproto.Message):
    from_id: str = betterproto.string_field(1)
    to_ei_user_id: str = betterproto.string_field(2)


@dataclass
class SaveBackupResponse(betterproto.Message):
    success: bool = betterproto.bool_field(1)
    error_code: int = betterproto.uint32_field(2)
    message: str = betterproto.string_field(3)
    existing_backup: "Backup" = betterproto.message_field(4)


@dataclass
class CleanAccountRequest(betterproto.Message):
    ei_user_id_to_keep: str = betterproto.string_field(1)
    game_services_id: str = betterproto.string_field(2)


@dataclass
class ReturnEDTPayload(betterproto.Message):
    ei_user_id: str = betterproto.string_field(1)


@dataclass
class DLCItem(betterproto.Message):
    name: str = betterproto.string_field(1)
    directory: str = betterproto.string_field(2)
    ext: str = betterproto.string_field(3)
    compressed: bool = betterproto.bool_field(6)
    original_size: int = betterproto.uint64_field(7)
    url: str = betterproto.string_field(4)
    checksum: str = betterproto.string_field(5)


@dataclass
class ShellSpec(betterproto.Message):
    identifier: str = betterproto.string_field(1)
    primary_piece: "ShellSpecShellPiece" = betterproto.message_field(12)
    pieces: List["ShellSpecShellPiece"] = betterproto.message_field(11)
    alt_assets: List["DLCItem"] = betterproto.message_field(18)
    name: str = betterproto.string_field(3)
    set_identifier: str = betterproto.string_field(13)
    modified_geometry: bool = betterproto.bool_field(19)
    price: int = betterproto.uint32_field(4)
    required_eop: int = betterproto.uint32_field(5)
    required_soul_eggs: float = betterproto.double_field(6)
    required_parent_shell: str = betterproto.string_field(20)
    is_new: bool = betterproto.bool_field(14)
    expires: bool = betterproto.bool_field(15)
    seconds_until_available: float = betterproto.double_field(17)
    seconds_remaining: float = betterproto.double_field(16)
    popularity: int = betterproto.uint64_field(21)
    default_appearance: bool = betterproto.bool_field(8)


@dataclass
class ShellSpecShellPiece(betterproto.Message):
    asset_type: "ShellSpecAssetType" = betterproto.enum_field(1)
    dlc: "DLCItem" = betterproto.message_field(2)


@dataclass
class ShellSetSpec(betterproto.Message):
    identifier: str = betterproto.string_field(1)
    name: str = betterproto.string_field(2)
    price: int = betterproto.uint32_field(3)
    price_mult__d_e_p_r_e_c_a_t_e_d: float = betterproto.double_field(8)
    discount: float = betterproto.double_field(17)
    required_eop: int = betterproto.uint32_field(4)
    required_soul_eggs: float = betterproto.double_field(5)
    required_parent_set: str = betterproto.string_field(20)
    is_new: bool = betterproto.bool_field(9)
    expires: bool = betterproto.bool_field(10)
    seconds_until_available: float = betterproto.double_field(18)
    seconds_remaining: float = betterproto.double_field(11)
    popularity: int = betterproto.uint64_field(21)
    decorator: bool = betterproto.bool_field(14)
    modified_geometry: bool = betterproto.bool_field(13)
    element_set: bool = betterproto.bool_field(7)
    hex_base_color: str = betterproto.string_field(16)
    variations: List["ShellSetSpecVariationSpec"] = betterproto.message_field(15)
    icon: "DLCItem" = betterproto.message_field(19)
    default_appearance: bool = betterproto.bool_field(6)
    custom_appearance: bool = betterproto.bool_field(12)


@dataclass
class ShellSetSpecVariationSpec(betterproto.Message):
    identifier: str = betterproto.string_field(1)
    hex_color: str = betterproto.string_field(2)
    price: int = betterproto.uint32_field(3)
    sort_priority: int = betterproto.int32_field(6)
    default_appearance: bool = betterproto.bool_field(4)
    custom_appearance: bool = betterproto.bool_field(5)


@dataclass
class ShellObjectSpec(betterproto.Message):
    identifier: str = betterproto.string_field(1)
    name: str = betterproto.string_field(2)
    asset_type: "ShellSpecAssetType" = betterproto.enum_field(3)
    object_class: str = betterproto.string_field(14)
    icon_colors: List[str] = betterproto.string_field(15)
    price: int = betterproto.uint32_field(4)
    required_eop: int = betterproto.uint32_field(5)
    required_soul_eggs: float = betterproto.double_field(6)
    is_new: bool = betterproto.bool_field(10)
    expires: bool = betterproto.bool_field(11)
    seconds_until_available: float = betterproto.double_field(18)
    seconds_remaining: float = betterproto.double_field(12)
    popularity: int = betterproto.uint64_field(19)
    metadata: List[float] = betterproto.double_field(7)
    no_hats: bool = betterproto.bool_field(13)
    chicken_animation: "ShellObjectSpecChickenAnimation" = betterproto.enum_field(16)
    sort_priority: int = betterproto.int32_field(17)
    pieces: List["ShellObjectSpecLODPiece"] = betterproto.message_field(8)
    default_appearance: bool = betterproto.bool_field(9)


@dataclass
class ShellObjectSpecLODPiece(betterproto.Message):
    dlc: "DLCItem" = betterproto.message_field(1)
    lod: int = betterproto.uint32_field(2)


@dataclass
class ShellGroupSpec(betterproto.Message):
    identifier: str = betterproto.string_field(1)
    name: str = betterproto.string_field(2)
    asset_type: "ShellSpecAssetType" = betterproto.enum_field(5)
    member_ids: List[str] = betterproto.string_field(3)
    price_mult__d_e_p_r_e_c_a_t_e_d: float = betterproto.double_field(4)


@dataclass
class DLCCatalog(betterproto.Message):
    items: List["DLCItem"] = betterproto.message_field(1)
    shells: List["ShellSpec"] = betterproto.message_field(2)
    shell_sets: List["ShellSetSpec"] = betterproto.message_field(3)
    decorators: List["ShellSetSpec"] = betterproto.message_field(6)
    shell_objects: List["ShellObjectSpec"] = betterproto.message_field(4)
    shell_groups: List["ShellGroupSpec"] = betterproto.message_field(5)
    shells_showcase_last_featured_time: float = betterproto.double_field(7)


@dataclass
class ShellDB(betterproto.Message):
    shell_inventory: List["ShellDBShellStatus"] = betterproto.message_field(1)
    shell_element_inventory: List["ShellDBShellElementStatus"] = (
        betterproto.message_field(5)
    )
    shell_variation_inventory: List["ShellDBShellSetVariationStatus"] = (
        betterproto.message_field(8)
    )
    shell_set_inventory: List["ShellDBShellStatus"] = betterproto.message_field(2)
    shell_object_inventory: List["ShellDBShellStatus"] = betterproto.message_field(4)
    farm_configs: List["ShellDBFarmConfiguration"] = betterproto.message_field(3)
    saved_configs: List["ShellDBSavedFarmConfiguration"] = betterproto.message_field(9)
    new_shells_downloaded: List[str] = betterproto.string_field(6)
    new_shells_seen: List[str] = betterproto.string_field(7)
    last_showcase_featured_time_seen: float = betterproto.double_field(11)
    lighting_controls_unlocked: bool = betterproto.bool_field(10)


@dataclass
class ShellDBShellStatus(betterproto.Message):
    identifier: str = betterproto.string_field(1)
    owned: bool = betterproto.bool_field(2)


@dataclass
class ShellDBShellElementStatus(betterproto.Message):
    element: "ShellDBFarmElement" = betterproto.enum_field(1)
    set_identifier: str = betterproto.string_field(2)


@dataclass
class ShellDBShellSetVariationStatus(betterproto.Message):
    set_identifier: str = betterproto.string_field(1)
    owned_variations: List[str] = betterproto.string_field(2)


@dataclass
class ShellDBFarmConfiguration(betterproto.Message):
    locked_elements: List["ShellDBFarmElement"] = betterproto.enum_field(10)
    shell_configs: List["ShellDBShellConfiguration"] = betterproto.message_field(1)
    shell_set_configs: List["ShellDBShellSetConfiguration"] = betterproto.message_field(
        2
    )
    configure_chickens_by_group: bool = betterproto.bool_field(7)
    group_configs: List["ShellDBShellGroupConfiguration"] = betterproto.message_field(8)
    chicken_configs: List["ShellDBChickenConfig"] = betterproto.message_field(9)
    lighting_config_enabled: bool = betterproto.bool_field(11)
    lighting_config: "ShellDBLightingConfig" = betterproto.message_field(12)


@dataclass
class ShellDBSavedFarmConfiguration(betterproto.Message):
    id: str = betterproto.string_field(1)
    config: "ShellDBFarmConfiguration" = betterproto.message_field(2)
    client_save_time: float = betterproto.double_field(3)
    server_id: str = betterproto.string_field(4)
    display_name: str = betterproto.string_field(5)
    purchased: bool = betterproto.bool_field(6)


@dataclass
class ShellDBShellConfiguration(betterproto.Message):
    asset_type: "ShellSpecAssetType" = betterproto.enum_field(1)
    index: int = betterproto.uint32_field(2)
    shell_identifier: str = betterproto.string_field(3)


@dataclass
class ShellDBShellSetConfiguration(betterproto.Message):
    element: "ShellDBFarmElement" = betterproto.enum_field(1)
    index: int = betterproto.uint32_field(2)
    shell_set_identifier: str = betterproto.string_field(3)
    variation_identifier: str = betterproto.string_field(4)
    decorator_identifier: str = betterproto.string_field(5)


@dataclass
class ShellDBShellGroupConfiguration(betterproto.Message):
    asset_type: "ShellSpecAssetType" = betterproto.enum_field(1)
    group_identifier: str = betterproto.string_field(2)


@dataclass
class ShellDBChickenConfig(betterproto.Message):
    chicken_identifier: str = betterproto.string_field(1)
    hat_identifier: str = betterproto.string_field(2)


@dataclass
class ShellDBLightingConfig(betterproto.Message):
    light_dir: "Vector3" = betterproto.message_field(1)
    light_direct_color: "Vector4" = betterproto.message_field(2)
    light_direct_intensity: float = betterproto.float_field(3)
    light_ambient_color: "Vector4" = betterproto.message_field(4)
    light_ambient_intensity: float = betterproto.float_field(5)
    fog_color: "Vector4" = betterproto.message_field(6)
    fog_near: float = betterproto.float_field(7)
    fog_far: float = betterproto.float_field(8)
    fog_density: float = betterproto.float_field(9)


@dataclass
class ShellPopularityStats(betterproto.Message):
    data: List["ShellPopularityStatsEntry"] = betterproto.message_field(1)


@dataclass
class ShellPopularityStatsEntry(betterproto.Message):
    id: str = betterproto.string_field(1)
    element: "ShellDBFarmElement" = betterproto.enum_field(2)
    spent: int = betterproto.uint64_field(3)
    count: int = betterproto.uint64_field(4)


@dataclass
class ShellsActionLog(betterproto.Message):
    rinfo: "BasicRequestInfo" = betterproto.message_field(8)
    user_id: str = betterproto.string_field(1)
    action: str = betterproto.string_field(2)
    sub_id: str = betterproto.string_field(3)
    farm_element: "ShellDBFarmElement" = betterproto.enum_field(9)
    cost: int = betterproto.uint32_field(4)
    approx_time: float = betterproto.double_field(5)
    version: str = betterproto.string_field(6)
    farm_index: int = betterproto.int32_field(7)
    soul_eggs: float = betterproto.double_field(10)
    tickets_spent: int = betterproto.uint64_field(11)
    gold_spent: int = betterproto.uint64_field(12)


@dataclass
class SubmitShellShowcaseRequest(betterproto.Message):
    rinfo: "BasicRequestInfo" = betterproto.message_field(4)
    local_id: str = betterproto.string_field(1)
    user_id: str = betterproto.string_field(2)
    public_username: bool = betterproto.bool_field(5)
    farm_config: "ShellDBFarmConfiguration" = betterproto.message_field(3)


@dataclass
class ShellShowcase(betterproto.Message):
    top: List["ShellShowcaseListingInfo"] = betterproto.message_field(1)
    featured: List["ShellShowcaseListingInfo"] = betterproto.message_field(2)
    fresh: List["ShellShowcaseListingInfo"] = betterproto.message_field(3)


@dataclass
class ShellShowcaseListingInfo(betterproto.Message):
    id: str = betterproto.string_field(1)
    local_id: str = betterproto.string_field(12)
    name: str = betterproto.string_field(2)
    description: str = betterproto.string_field(3)
    is_new: bool = betterproto.bool_field(15)
    creator_name: str = betterproto.string_field(14)
    status: "ShellShowcaseListingInfoStatus" = betterproto.enum_field(11)
    farm_config: "ShellDBFarmConfiguration" = betterproto.message_field(4)
    sales: int = betterproto.uint32_field(5)
    gross: int = betterproto.uint64_field(6)
    views: int = betterproto.uint64_field(7)
    equips: int = betterproto.uint64_field(13)
    likes: int = betterproto.uint32_field(8)
    dislikes: int = betterproto.uint32_field(9)
    share_url: str = betterproto.string_field(10)


@dataclass
class ShowcaseRoyaltyDeliveryConfirmation(betterproto.Message):
    rinfo: "BasicRequestInfo" = betterproto.message_field(3)
    ids: List[str] = betterproto.string_field(1)
    amount: int = betterproto.uint32_field(2)


@dataclass
class ShellShowcaseListingSet(betterproto.Message):
    listings: List["ShellShowcaseListingInfo"] = betterproto.message_field(1)


@dataclass
class ShellsActionBatch(betterproto.Message):
    rinfo: "BasicRequestInfo" = betterproto.message_field(1)
    actions: List["ShellsActionLog"] = betterproto.message_field(2)


@dataclass
class UserVerificationAnalysis(betterproto.Message):
    overall_status: "UserVerificationAnalysisStatus" = betterproto.enum_field(1)
    start_time: float = betterproto.double_field(2)
    completion_time: float = betterproto.double_field(3)
    num_prestiges: float = betterproto.double_field(14)
    soul_eggs: float = betterproto.double_field(15)
    eggs_of_prophecy: int = betterproto.uint32_field(27)
    iap_status: "UserVerificationAnalysisStatus" = betterproto.enum_field(18)
    verified_pro_permit: bool = betterproto.bool_field(4)
    verified_piggy_breaks: int = betterproto.uint32_field(5)
    verified_other_iap: int = betterproto.uint32_field(6)
    unverified_iap: int = betterproto.uint32_field(7)
    gold_earned: float = betterproto.double_field(13)
    regular_iap_buyer: bool = betterproto.bool_field(22)
    regular_iap_cheater: bool = betterproto.bool_field(23)
    artifacts_status: "UserVerificationAnalysisStatus" = betterproto.enum_field(19)
    missions_completed: int = betterproto.uint32_field(8)
    artifacts_collected: float = betterproto.double_field(9)
    artifacts_consumed: float = betterproto.double_field(10)
    artifacts_in_inventory: float = betterproto.double_field(11)
    rare_artifacts_in_inventory: int = betterproto.uint64_field(33)
    rare_artifacts_on_server: int = betterproto.uint64_field(34)
    legendary_artifacts_in_inventory: int = betterproto.uint64_field(35)
    legendary_artifacts_on_server: int = betterproto.uint64_field(36)
    gold_spent_crafting: float = betterproto.double_field(21)
    excessive_consumes: bool = betterproto.bool_field(24)
    excessive_inventory: bool = betterproto.bool_field(25)
    excessive_spend: bool = betterproto.bool_field(26)
    contracts_status: "UserVerificationAnalysisStatus" = betterproto.enum_field(20)
    num_coop_memberships: int = betterproto.uint32_field(12)
    valid_contracts: int = betterproto.uint32_field(16)
    invalid_contracts: List[str] = betterproto.string_field(17)
    excessive_eop: bool = betterproto.bool_field(28)
    excessive_invalid_contracts: bool = betterproto.bool_field(29)
    verified: bool = betterproto.bool_field(30)
    verification_override: bool = betterproto.bool_field(31)
    verification_override_value: bool = betterproto.bool_field(32)


@dataclass
class UserSubscriptionInfo(betterproto.Message):
    subscription_level: "UserSubscriptionInfoLevel" = betterproto.enum_field(13)
    next_subscription_level: "UserSubscriptionInfoLevel" = betterproto.enum_field(15)
    lock_next_subscription_level: bool = betterproto.bool_field(18)
    platform: "Platform" = betterproto.enum_field(10)
    original_transaction_id: str = betterproto.string_field(1)
    linked_transaction_id: str = betterproto.string_field(16)
    acknowledged: bool = betterproto.bool_field(17)
    first_subscribed: float = betterproto.double_field(2)
    period_end: float = betterproto.double_field(4)
    status: "UserSubscriptionInfoStatus" = betterproto.enum_field(5)
    store_status: str = betterproto.string_field(14)
    auto_renew: bool = betterproto.bool_field(6)
    sandbox: bool = betterproto.bool_field(19)
    last_updated: float = betterproto.double_field(7)
    history: List["UserSubscriptionInfoHistoryEntry"] = betterproto.message_field(9)
    past_user_ids: List[str] = betterproto.string_field(11)


@dataclass
class UserSubscriptionInfoHistoryEntry(betterproto.Message):
    timestamp: float = betterproto.double_field(1)
    message_id: str = betterproto.string_field(2)
    message: str = betterproto.string_field(3)


@dataclass
class SubscriptionChangeHintRequest(betterproto.Message):
    rinfo: "BasicRequestInfo" = betterproto.message_field(3)
    original_transaction_id: str = betterproto.string_field(1)
    next_subscription_level: "UserSubscriptionInfoLevel" = betterproto.enum_field(2)


@dataclass
class CXPEvalRolloutInfo(betterproto.Message):
    current_id: str = betterproto.string_field(1)
    basis_points: int = betterproto.uint32_field(2)
